// Code generated by capnpc-go. DO NOT EDIT.

package aircraftlib

import (
	context "context"
	math "math"
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
	server "zombiezen.com/go/capnproto2/server"
)

// Constants defined in aircraft.capnp.
const (
	ConstEnum = Airport_jfk
)

// Constants defined in aircraft.capnp.
var (
	ConstDate = Zdate{Struct: capnp.MustUnmarshalRoot(x_832bcc6686a26d56[0:24]).Struct()}
	ConstList = Zdate_List{List: capnp.MustUnmarshalRoot(x_832bcc6686a26d56[24:64]).List()}
)

type Zdate struct{ capnp.Struct }

// Zdate_TypeID is the unique identifier for the type Zdate.
const Zdate_TypeID = 0xde50aebbad57549d

func NewZdate(s *capnp.Segment) (Zdate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Zdate{st}, err
}

func NewRootZdate(s *capnp.Segment) (Zdate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Zdate{st}, err
}

func ReadRootZdate(msg *capnp.Message) (Zdate, error) {
	root, err := msg.Root()
	return Zdate{root.Struct()}, err
}

func (s Zdate) String() string {
	str, _ := text.Marshal(0xde50aebbad57549d, s.Struct)
	return str
}

func (s Zdate) Year() int16 {
	return int16(s.Struct.Uint16(0))
}

func (s Zdate) SetYear(v int16) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s Zdate) Month() uint8 {
	return s.Struct.Uint8(2)
}

func (s Zdate) SetMonth(v uint8) {
	s.Struct.SetUint8(2, v)
}

func (s Zdate) Day() uint8 {
	return s.Struct.Uint8(3)
}

func (s Zdate) SetDay(v uint8) {
	s.Struct.SetUint8(3, v)
}

// Zdate_List is a list of Zdate.
type Zdate_List struct{ capnp.List }

// NewZdate creates a new list of Zdate.
func NewZdate_List(s *capnp.Segment, sz int32) (Zdate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Zdate_List{l}, err
}

func (s Zdate_List) At(i int) Zdate { return Zdate{s.List.Struct(i)} }

func (s Zdate_List) Set(i int, v Zdate) error { return s.List.SetStruct(i, v.Struct) }

func (s Zdate_List) String() string {
	str, _ := text.MarshalList(0xde50aebbad57549d, s.List)
	return str
}

// Zdate_Future is a wrapper for a Zdate promised by a client call.
type Zdate_Future struct{ *capnp.Future }

func (p Zdate_Future) Struct() (Zdate, error) {
	s, err := p.Future.Struct()
	return Zdate{s}, err
}

type Zdata struct{ capnp.Struct }

// Zdata_TypeID is the unique identifier for the type Zdata.
const Zdata_TypeID = 0xc7da65f9a2f20ba2

func NewZdata(s *capnp.Segment) (Zdata, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Zdata{st}, err
}

func NewRootZdata(s *capnp.Segment) (Zdata, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Zdata{st}, err
}

func ReadRootZdata(msg *capnp.Message) (Zdata, error) {
	root, err := msg.Root()
	return Zdata{root.Struct()}, err
}

func (s Zdata) String() string {
	str, _ := text.Marshal(0xc7da65f9a2f20ba2, s.Struct)
	return str
}

func (s Zdata) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Zdata) HasData() bool {
	return s.Struct.HasPtr(0)
}

func (s Zdata) SetData(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Zdata_List is a list of Zdata.
type Zdata_List struct{ capnp.List }

// NewZdata creates a new list of Zdata.
func NewZdata_List(s *capnp.Segment, sz int32) (Zdata_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Zdata_List{l}, err
}

func (s Zdata_List) At(i int) Zdata { return Zdata{s.List.Struct(i)} }

func (s Zdata_List) Set(i int, v Zdata) error { return s.List.SetStruct(i, v.Struct) }

func (s Zdata_List) String() string {
	str, _ := text.MarshalList(0xc7da65f9a2f20ba2, s.List)
	return str
}

// Zdata_Future is a wrapper for a Zdata promised by a client call.
type Zdata_Future struct{ *capnp.Future }

func (p Zdata_Future) Struct() (Zdata, error) {
	s, err := p.Future.Struct()
	return Zdata{s}, err
}

type Airport uint16

// Airport_TypeID is the unique identifier for the type Airport.
const Airport_TypeID = 0xe55d85fc1bf82f21

// Values of Airport.
const (
	Airport_none Airport = 0
	Airport_jfk  Airport = 1
	Airport_lax  Airport = 2
	Airport_sfo  Airport = 3
	Airport_luv  Airport = 4
	Airport_dfw  Airport = 5
	Airport_test Airport = 6
)

// String returns the enum's constant name.
func (c Airport) String() string {
	switch c {
	case Airport_none:
		return "none"
	case Airport_jfk:
		return "jfk"
	case Airport_lax:
		return "lax"
	case Airport_sfo:
		return "sfo"
	case Airport_luv:
		return "luv"
	case Airport_dfw:
		return "dfw"
	case Airport_test:
		return "test"

	default:
		return ""
	}
}

// AirportFromString returns the enum value with a name,
// or the zero value if there's no such value.
func AirportFromString(c string) Airport {
	switch c {
	case "none":
		return Airport_none
	case "jfk":
		return Airport_jfk
	case "lax":
		return Airport_lax
	case "sfo":
		return Airport_sfo
	case "luv":
		return Airport_luv
	case "dfw":
		return Airport_dfw
	case "test":
		return Airport_test

	default:
		return 0
	}
}

type Airport_List struct{ capnp.List }

func NewAirport_List(s *capnp.Segment, sz int32) (Airport_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return Airport_List{l.List}, err
}

func (l Airport_List) At(i int) Airport {
	ul := capnp.UInt16List{List: l.List}
	return Airport(ul.At(i))
}

func (l Airport_List) Set(i int, v Airport) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type PlaneBase struct{ capnp.Struct }

// PlaneBase_TypeID is the unique identifier for the type PlaneBase.
const PlaneBase_TypeID = 0xd8bccf6e60a73791

func NewPlaneBase(s *capnp.Segment) (PlaneBase, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2})
	return PlaneBase{st}, err
}

func NewRootPlaneBase(s *capnp.Segment) (PlaneBase, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2})
	return PlaneBase{st}, err
}

func ReadRootPlaneBase(msg *capnp.Message) (PlaneBase, error) {
	root, err := msg.Root()
	return PlaneBase{root.Struct()}, err
}

func (s PlaneBase) String() string {
	str, _ := text.Marshal(0xd8bccf6e60a73791, s.Struct)
	return str
}

func (s PlaneBase) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s PlaneBase) HasName() bool {
	return s.Struct.HasPtr(0)
}

func (s PlaneBase) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s PlaneBase) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s PlaneBase) Homes() (Airport_List, error) {
	p, err := s.Struct.Ptr(1)
	return Airport_List{List: p.List()}, err
}

func (s PlaneBase) HasHomes() bool {
	return s.Struct.HasPtr(1)
}

func (s PlaneBase) SetHomes(v Airport_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewHomes sets the homes field to a newly
// allocated Airport_List, preferring placement in s's segment.
func (s PlaneBase) NewHomes(n int32) (Airport_List, error) {
	l, err := NewAirport_List(s.Struct.Segment(), n)
	if err != nil {
		return Airport_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s PlaneBase) Rating() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s PlaneBase) SetRating(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

func (s PlaneBase) CanFly() bool {
	return s.Struct.Bit(64)
}

func (s PlaneBase) SetCanFly(v bool) {
	s.Struct.SetBit(64, v)
}

func (s PlaneBase) Capacity() int64 {
	return int64(s.Struct.Uint64(16))
}

func (s PlaneBase) SetCapacity(v int64) {
	s.Struct.SetUint64(16, uint64(v))
}

func (s PlaneBase) MaxSpeed() float64 {
	return math.Float64frombits(s.Struct.Uint64(24))
}

func (s PlaneBase) SetMaxSpeed(v float64) {
	s.Struct.SetUint64(24, math.Float64bits(v))
}

// PlaneBase_List is a list of PlaneBase.
type PlaneBase_List struct{ capnp.List }

// NewPlaneBase creates a new list of PlaneBase.
func NewPlaneBase_List(s *capnp.Segment, sz int32) (PlaneBase_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2}, sz)
	return PlaneBase_List{l}, err
}

func (s PlaneBase_List) At(i int) PlaneBase { return PlaneBase{s.List.Struct(i)} }

func (s PlaneBase_List) Set(i int, v PlaneBase) error { return s.List.SetStruct(i, v.Struct) }

func (s PlaneBase_List) String() string {
	str, _ := text.MarshalList(0xd8bccf6e60a73791, s.List)
	return str
}

// PlaneBase_Future is a wrapper for a PlaneBase promised by a client call.
type PlaneBase_Future struct{ *capnp.Future }

func (p PlaneBase_Future) Struct() (PlaneBase, error) {
	s, err := p.Future.Struct()
	return PlaneBase{s}, err
}

type B737 struct{ capnp.Struct }

// B737_TypeID is the unique identifier for the type B737.
const B737_TypeID = 0xccb3b2e3603826e0

func NewB737(s *capnp.Segment) (B737, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return B737{st}, err
}

func NewRootB737(s *capnp.Segment) (B737, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return B737{st}, err
}

func ReadRootB737(msg *capnp.Message) (B737, error) {
	root, err := msg.Root()
	return B737{root.Struct()}, err
}

func (s B737) String() string {
	str, _ := text.Marshal(0xccb3b2e3603826e0, s.Struct)
	return str
}

func (s B737) Base() (PlaneBase, error) {
	p, err := s.Struct.Ptr(0)
	return PlaneBase{Struct: p.Struct()}, err
}

func (s B737) HasBase() bool {
	return s.Struct.HasPtr(0)
}

func (s B737) SetBase(v PlaneBase) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewBase sets the base field to a newly
// allocated PlaneBase struct, preferring placement in s's segment.
func (s B737) NewBase() (PlaneBase, error) {
	ss, err := NewPlaneBase(s.Struct.Segment())
	if err != nil {
		return PlaneBase{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// B737_List is a list of B737.
type B737_List struct{ capnp.List }

// NewB737 creates a new list of B737.
func NewB737_List(s *capnp.Segment, sz int32) (B737_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return B737_List{l}, err
}

func (s B737_List) At(i int) B737 { return B737{s.List.Struct(i)} }

func (s B737_List) Set(i int, v B737) error { return s.List.SetStruct(i, v.Struct) }

func (s B737_List) String() string {
	str, _ := text.MarshalList(0xccb3b2e3603826e0, s.List)
	return str
}

// B737_Future is a wrapper for a B737 promised by a client call.
type B737_Future struct{ *capnp.Future }

func (p B737_Future) Struct() (B737, error) {
	s, err := p.Future.Struct()
	return B737{s}, err
}

func (p B737_Future) Base() PlaneBase_Future {
	return PlaneBase_Future{Future: p.Future.Field(0, nil)}
}

type A320 struct{ capnp.Struct }

// A320_TypeID is the unique identifier for the type A320.
const A320_TypeID = 0xd98c608877d9cb8d

func NewA320(s *capnp.Segment) (A320, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return A320{st}, err
}

func NewRootA320(s *capnp.Segment) (A320, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return A320{st}, err
}

func ReadRootA320(msg *capnp.Message) (A320, error) {
	root, err := msg.Root()
	return A320{root.Struct()}, err
}

func (s A320) String() string {
	str, _ := text.Marshal(0xd98c608877d9cb8d, s.Struct)
	return str
}

func (s A320) Base() (PlaneBase, error) {
	p, err := s.Struct.Ptr(0)
	return PlaneBase{Struct: p.Struct()}, err
}

func (s A320) HasBase() bool {
	return s.Struct.HasPtr(0)
}

func (s A320) SetBase(v PlaneBase) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewBase sets the base field to a newly
// allocated PlaneBase struct, preferring placement in s's segment.
func (s A320) NewBase() (PlaneBase, error) {
	ss, err := NewPlaneBase(s.Struct.Segment())
	if err != nil {
		return PlaneBase{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// A320_List is a list of A320.
type A320_List struct{ capnp.List }

// NewA320 creates a new list of A320.
func NewA320_List(s *capnp.Segment, sz int32) (A320_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return A320_List{l}, err
}

func (s A320_List) At(i int) A320 { return A320{s.List.Struct(i)} }

func (s A320_List) Set(i int, v A320) error { return s.List.SetStruct(i, v.Struct) }

func (s A320_List) String() string {
	str, _ := text.MarshalList(0xd98c608877d9cb8d, s.List)
	return str
}

// A320_Future is a wrapper for a A320 promised by a client call.
type A320_Future struct{ *capnp.Future }

func (p A320_Future) Struct() (A320, error) {
	s, err := p.Future.Struct()
	return A320{s}, err
}

func (p A320_Future) Base() PlaneBase_Future {
	return PlaneBase_Future{Future: p.Future.Field(0, nil)}
}

type F16 struct{ capnp.Struct }

// F16_TypeID is the unique identifier for the type F16.
const F16_TypeID = 0xe1c9eac512335361

func NewF16(s *capnp.Segment) (F16, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return F16{st}, err
}

func NewRootF16(s *capnp.Segment) (F16, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return F16{st}, err
}

func ReadRootF16(msg *capnp.Message) (F16, error) {
	root, err := msg.Root()
	return F16{root.Struct()}, err
}

func (s F16) String() string {
	str, _ := text.Marshal(0xe1c9eac512335361, s.Struct)
	return str
}

func (s F16) Base() (PlaneBase, error) {
	p, err := s.Struct.Ptr(0)
	return PlaneBase{Struct: p.Struct()}, err
}

func (s F16) HasBase() bool {
	return s.Struct.HasPtr(0)
}

func (s F16) SetBase(v PlaneBase) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewBase sets the base field to a newly
// allocated PlaneBase struct, preferring placement in s's segment.
func (s F16) NewBase() (PlaneBase, error) {
	ss, err := NewPlaneBase(s.Struct.Segment())
	if err != nil {
		return PlaneBase{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// F16_List is a list of F16.
type F16_List struct{ capnp.List }

// NewF16 creates a new list of F16.
func NewF16_List(s *capnp.Segment, sz int32) (F16_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return F16_List{l}, err
}

func (s F16_List) At(i int) F16 { return F16{s.List.Struct(i)} }

func (s F16_List) Set(i int, v F16) error { return s.List.SetStruct(i, v.Struct) }

func (s F16_List) String() string {
	str, _ := text.MarshalList(0xe1c9eac512335361, s.List)
	return str
}

// F16_Future is a wrapper for a F16 promised by a client call.
type F16_Future struct{ *capnp.Future }

func (p F16_Future) Struct() (F16, error) {
	s, err := p.Future.Struct()
	return F16{s}, err
}

func (p F16_Future) Base() PlaneBase_Future {
	return PlaneBase_Future{Future: p.Future.Field(0, nil)}
}

type Regression struct{ capnp.Struct }

// Regression_TypeID is the unique identifier for the type Regression.
const Regression_TypeID = 0xb1f0385d845e367f

func NewRegression(s *capnp.Segment) (Regression, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 3})
	return Regression{st}, err
}

func NewRootRegression(s *capnp.Segment) (Regression, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 3})
	return Regression{st}, err
}

func ReadRootRegression(msg *capnp.Message) (Regression, error) {
	root, err := msg.Root()
	return Regression{root.Struct()}, err
}

func (s Regression) String() string {
	str, _ := text.Marshal(0xb1f0385d845e367f, s.Struct)
	return str
}

func (s Regression) Base() (PlaneBase, error) {
	p, err := s.Struct.Ptr(0)
	return PlaneBase{Struct: p.Struct()}, err
}

func (s Regression) HasBase() bool {
	return s.Struct.HasPtr(0)
}

func (s Regression) SetBase(v PlaneBase) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewBase sets the base field to a newly
// allocated PlaneBase struct, preferring placement in s's segment.
func (s Regression) NewBase() (PlaneBase, error) {
	ss, err := NewPlaneBase(s.Struct.Segment())
	if err != nil {
		return PlaneBase{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Regression) B0() float64 {
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s Regression) SetB0(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v))
}

func (s Regression) Beta() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.Float64List{List: p.List()}, err
}

func (s Regression) HasBeta() bool {
	return s.Struct.HasPtr(1)
}

func (s Regression) SetBeta(v capnp.Float64List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewBeta sets the beta field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s Regression) NewBeta(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s Regression) Planes() (Aircraft_List, error) {
	p, err := s.Struct.Ptr(2)
	return Aircraft_List{List: p.List()}, err
}

func (s Regression) HasPlanes() bool {
	return s.Struct.HasPtr(2)
}

func (s Regression) SetPlanes(v Aircraft_List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewPlanes sets the planes field to a newly
// allocated Aircraft_List, preferring placement in s's segment.
func (s Regression) NewPlanes(n int32) (Aircraft_List, error) {
	l, err := NewAircraft_List(s.Struct.Segment(), n)
	if err != nil {
		return Aircraft_List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s Regression) Ymu() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s Regression) SetYmu(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

func (s Regression) Ysd() float64 {
	return math.Float64frombits(s.Struct.Uint64(16))
}

func (s Regression) SetYsd(v float64) {
	s.Struct.SetUint64(16, math.Float64bits(v))
}

// Regression_List is a list of Regression.
type Regression_List struct{ capnp.List }

// NewRegression creates a new list of Regression.
func NewRegression_List(s *capnp.Segment, sz int32) (Regression_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 3}, sz)
	return Regression_List{l}, err
}

func (s Regression_List) At(i int) Regression { return Regression{s.List.Struct(i)} }

func (s Regression_List) Set(i int, v Regression) error { return s.List.SetStruct(i, v.Struct) }

func (s Regression_List) String() string {
	str, _ := text.MarshalList(0xb1f0385d845e367f, s.List)
	return str
}

// Regression_Future is a wrapper for a Regression promised by a client call.
type Regression_Future struct{ *capnp.Future }

func (p Regression_Future) Struct() (Regression, error) {
	s, err := p.Future.Struct()
	return Regression{s}, err
}

func (p Regression_Future) Base() PlaneBase_Future {
	return PlaneBase_Future{Future: p.Future.Field(0, nil)}
}

type Aircraft struct{ capnp.Struct }
type Aircraft_Which uint16

const (
	Aircraft_Which_void Aircraft_Which = 0
	Aircraft_Which_b737 Aircraft_Which = 1
	Aircraft_Which_a320 Aircraft_Which = 2
	Aircraft_Which_f16  Aircraft_Which = 3
)

func (w Aircraft_Which) String() string {
	const s = "voidb737a320f16"
	switch w {
	case Aircraft_Which_void:
		return s[0:4]
	case Aircraft_Which_b737:
		return s[4:8]
	case Aircraft_Which_a320:
		return s[8:12]
	case Aircraft_Which_f16:
		return s[12:15]

	}
	return "Aircraft_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Aircraft_TypeID is the unique identifier for the type Aircraft.
const Aircraft_TypeID = 0xe54e10aede55c7b1

func NewAircraft(s *capnp.Segment) (Aircraft, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Aircraft{st}, err
}

func NewRootAircraft(s *capnp.Segment) (Aircraft, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Aircraft{st}, err
}

func ReadRootAircraft(msg *capnp.Message) (Aircraft, error) {
	root, err := msg.Root()
	return Aircraft{root.Struct()}, err
}

func (s Aircraft) String() string {
	str, _ := text.Marshal(0xe54e10aede55c7b1, s.Struct)
	return str
}

func (s Aircraft) Which() Aircraft_Which {
	return Aircraft_Which(s.Struct.Uint16(0))
}
func (s Aircraft) SetVoid() {
	s.Struct.SetUint16(0, 0)

}

func (s Aircraft) B737() (B737, error) {
	p, err := s.Struct.Ptr(0)
	return B737{Struct: p.Struct()}, err
}

func (s Aircraft) HasB737() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Aircraft) SetB737(v B737) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewB737 sets the b737 field to a newly
// allocated B737 struct, preferring placement in s's segment.
func (s Aircraft) NewB737() (B737, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewB737(s.Struct.Segment())
	if err != nil {
		return B737{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Aircraft) A320() (A320, error) {
	p, err := s.Struct.Ptr(0)
	return A320{Struct: p.Struct()}, err
}

func (s Aircraft) HasA320() bool {
	if s.Struct.Uint16(0) != 2 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Aircraft) SetA320(v A320) error {
	s.Struct.SetUint16(0, 2)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewA320 sets the a320 field to a newly
// allocated A320 struct, preferring placement in s's segment.
func (s Aircraft) NewA320() (A320, error) {
	s.Struct.SetUint16(0, 2)
	ss, err := NewA320(s.Struct.Segment())
	if err != nil {
		return A320{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Aircraft) F16() (F16, error) {
	p, err := s.Struct.Ptr(0)
	return F16{Struct: p.Struct()}, err
}

func (s Aircraft) HasF16() bool {
	if s.Struct.Uint16(0) != 3 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Aircraft) SetF16(v F16) error {
	s.Struct.SetUint16(0, 3)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewF16 sets the f16 field to a newly
// allocated F16 struct, preferring placement in s's segment.
func (s Aircraft) NewF16() (F16, error) {
	s.Struct.SetUint16(0, 3)
	ss, err := NewF16(s.Struct.Segment())
	if err != nil {
		return F16{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Aircraft_List is a list of Aircraft.
type Aircraft_List struct{ capnp.List }

// NewAircraft creates a new list of Aircraft.
func NewAircraft_List(s *capnp.Segment, sz int32) (Aircraft_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Aircraft_List{l}, err
}

func (s Aircraft_List) At(i int) Aircraft { return Aircraft{s.List.Struct(i)} }

func (s Aircraft_List) Set(i int, v Aircraft) error { return s.List.SetStruct(i, v.Struct) }

func (s Aircraft_List) String() string {
	str, _ := text.MarshalList(0xe54e10aede55c7b1, s.List)
	return str
}

// Aircraft_Future is a wrapper for a Aircraft promised by a client call.
type Aircraft_Future struct{ *capnp.Future }

func (p Aircraft_Future) Struct() (Aircraft, error) {
	s, err := p.Future.Struct()
	return Aircraft{s}, err
}

func (p Aircraft_Future) B737() B737_Future {
	return B737_Future{Future: p.Future.Field(0, nil)}
}

func (p Aircraft_Future) A320() A320_Future {
	return A320_Future{Future: p.Future.Field(0, nil)}
}

func (p Aircraft_Future) F16() F16_Future {
	return F16_Future{Future: p.Future.Field(0, nil)}
}

type Z struct{ capnp.Struct }
type Z_grp Z
type Z_Which uint16

const (
	Z_Which_void          Z_Which = 0
	Z_Which_zz            Z_Which = 1
	Z_Which_f64           Z_Which = 2
	Z_Which_f32           Z_Which = 3
	Z_Which_i64           Z_Which = 4
	Z_Which_i32           Z_Which = 5
	Z_Which_i16           Z_Which = 6
	Z_Which_i8            Z_Which = 7
	Z_Which_u64           Z_Which = 8
	Z_Which_u32           Z_Which = 9
	Z_Which_u16           Z_Which = 10
	Z_Which_u8            Z_Which = 11
	Z_Which_bool          Z_Which = 12
	Z_Which_text          Z_Which = 13
	Z_Which_blob          Z_Which = 14
	Z_Which_f64vec        Z_Which = 15
	Z_Which_f32vec        Z_Which = 16
	Z_Which_i64vec        Z_Which = 17
	Z_Which_i32vec        Z_Which = 18
	Z_Which_i16vec        Z_Which = 19
	Z_Which_i8vec         Z_Which = 20
	Z_Which_u64vec        Z_Which = 21
	Z_Which_u32vec        Z_Which = 22
	Z_Which_u16vec        Z_Which = 23
	Z_Which_u8vec         Z_Which = 24
	Z_Which_boolvec       Z_Which = 39
	Z_Which_datavec       Z_Which = 40
	Z_Which_textvec       Z_Which = 41
	Z_Which_zvec          Z_Which = 25
	Z_Which_zvecvec       Z_Which = 26
	Z_Which_zdate         Z_Which = 27
	Z_Which_zdata         Z_Which = 28
	Z_Which_aircraftvec   Z_Which = 29
	Z_Which_aircraft      Z_Which = 30
	Z_Which_regression    Z_Which = 31
	Z_Which_planebase     Z_Which = 32
	Z_Which_airport       Z_Which = 33
	Z_Which_b737          Z_Which = 34
	Z_Which_a320          Z_Which = 35
	Z_Which_f16           Z_Which = 36
	Z_Which_zdatevec      Z_Which = 37
	Z_Which_zdatavec      Z_Which = 38
	Z_Which_grp           Z_Which = 42
	Z_Which_echo          Z_Which = 43
	Z_Which_echoes        Z_Which = 44
	Z_Which_anyPtr        Z_Which = 45
	Z_Which_anyStruct     Z_Which = 46
	Z_Which_anyList       Z_Which = 47
	Z_Which_anyCapability Z_Which = 48
)

func (w Z_Which) String() string {
	const s = "voidzzf64f32i64i32i16i8u64u32u16u8booltextblobf64vecf32veci64veci32veci16veci8vecu64vecu32vecu16vecu8vecboolvecdatavectextveczveczvecveczdatezdataaircraftvecaircraftregressionplanebaseairportb737a320f16zdateveczdatavecgrpechoechoesanyPtranyStructanyListanyCapability"
	switch w {
	case Z_Which_void:
		return s[0:4]
	case Z_Which_zz:
		return s[4:6]
	case Z_Which_f64:
		return s[6:9]
	case Z_Which_f32:
		return s[9:12]
	case Z_Which_i64:
		return s[12:15]
	case Z_Which_i32:
		return s[15:18]
	case Z_Which_i16:
		return s[18:21]
	case Z_Which_i8:
		return s[21:23]
	case Z_Which_u64:
		return s[23:26]
	case Z_Which_u32:
		return s[26:29]
	case Z_Which_u16:
		return s[29:32]
	case Z_Which_u8:
		return s[32:34]
	case Z_Which_bool:
		return s[34:38]
	case Z_Which_text:
		return s[38:42]
	case Z_Which_blob:
		return s[42:46]
	case Z_Which_f64vec:
		return s[46:52]
	case Z_Which_f32vec:
		return s[52:58]
	case Z_Which_i64vec:
		return s[58:64]
	case Z_Which_i32vec:
		return s[64:70]
	case Z_Which_i16vec:
		return s[70:76]
	case Z_Which_i8vec:
		return s[76:81]
	case Z_Which_u64vec:
		return s[81:87]
	case Z_Which_u32vec:
		return s[87:93]
	case Z_Which_u16vec:
		return s[93:99]
	case Z_Which_u8vec:
		return s[99:104]
	case Z_Which_boolvec:
		return s[104:111]
	case Z_Which_datavec:
		return s[111:118]
	case Z_Which_textvec:
		return s[118:125]
	case Z_Which_zvec:
		return s[125:129]
	case Z_Which_zvecvec:
		return s[129:136]
	case Z_Which_zdate:
		return s[136:141]
	case Z_Which_zdata:
		return s[141:146]
	case Z_Which_aircraftvec:
		return s[146:157]
	case Z_Which_aircraft:
		return s[157:165]
	case Z_Which_regression:
		return s[165:175]
	case Z_Which_planebase:
		return s[175:184]
	case Z_Which_airport:
		return s[184:191]
	case Z_Which_b737:
		return s[191:195]
	case Z_Which_a320:
		return s[195:199]
	case Z_Which_f16:
		return s[199:202]
	case Z_Which_zdatevec:
		return s[202:210]
	case Z_Which_zdatavec:
		return s[210:218]
	case Z_Which_grp:
		return s[218:221]
	case Z_Which_echo:
		return s[221:225]
	case Z_Which_echoes:
		return s[225:231]
	case Z_Which_anyPtr:
		return s[231:237]
	case Z_Which_anyStruct:
		return s[237:246]
	case Z_Which_anyList:
		return s[246:253]
	case Z_Which_anyCapability:
		return s[253:266]

	}
	return "Z_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Z_TypeID is the unique identifier for the type Z.
const Z_TypeID = 0xea26e9973bd6a0d9

func NewZ(s *capnp.Segment) (Z, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return Z{st}, err
}

func NewRootZ(s *capnp.Segment) (Z, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return Z{st}, err
}

func ReadRootZ(msg *capnp.Message) (Z, error) {
	root, err := msg.Root()
	return Z{root.Struct()}, err
}

func (s Z) String() string {
	str, _ := text.Marshal(0xea26e9973bd6a0d9, s.Struct)
	return str
}

func (s Z) Which() Z_Which {
	return Z_Which(s.Struct.Uint16(0))
}
func (s Z) SetVoid() {
	s.Struct.SetUint16(0, 0)

}

func (s Z) Zz() (Z, error) {
	p, err := s.Struct.Ptr(0)
	return Z{Struct: p.Struct()}, err
}

func (s Z) HasZz() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Z) SetZz(v Z) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewZz sets the zz field to a newly
// allocated Z struct, preferring placement in s's segment.
func (s Z) NewZz() (Z, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewZ(s.Struct.Segment())
	if err != nil {
		return Z{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Z) F64() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s Z) SetF64(v float64) {
	s.Struct.SetUint16(0, 2)
	s.Struct.SetUint64(8, math.Float64bits(v))
}

func (s Z) F32() float32 {
	return math.Float32frombits(s.Struct.Uint32(8))
}

func (s Z) SetF32(v float32) {
	s.Struct.SetUint16(0, 3)
	s.Struct.SetUint32(8, math.Float32bits(v))
}

func (s Z) I64() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s Z) SetI64(v int64) {
	s.Struct.SetUint16(0, 4)
	s.Struct.SetUint64(8, uint64(v))
}

func (s Z) I32() int32 {
	return int32(s.Struct.Uint32(8))
}

func (s Z) SetI32(v int32) {
	s.Struct.SetUint16(0, 5)
	s.Struct.SetUint32(8, uint32(v))
}

func (s Z) I16() int16 {
	return int16(s.Struct.Uint16(8))
}

func (s Z) SetI16(v int16) {
	s.Struct.SetUint16(0, 6)
	s.Struct.SetUint16(8, uint16(v))
}

func (s Z) I8() int8 {
	return int8(s.Struct.Uint8(8))
}

func (s Z) SetI8(v int8) {
	s.Struct.SetUint16(0, 7)
	s.Struct.SetUint8(8, uint8(v))
}

func (s Z) U64() uint64 {
	return s.Struct.Uint64(8)
}

func (s Z) SetU64(v uint64) {
	s.Struct.SetUint16(0, 8)
	s.Struct.SetUint64(8, v)
}

func (s Z) U32() uint32 {
	return s.Struct.Uint32(8)
}

func (s Z) SetU32(v uint32) {
	s.Struct.SetUint16(0, 9)
	s.Struct.SetUint32(8, v)
}

func (s Z) U16() uint16 {
	return s.Struct.Uint16(8)
}

func (s Z) SetU16(v uint16) {
	s.Struct.SetUint16(0, 10)
	s.Struct.SetUint16(8, v)
}

func (s Z) U8() uint8 {
	return s.Struct.Uint8(8)
}

func (s Z) SetU8(v uint8) {
	s.Struct.SetUint16(0, 11)
	s.Struct.SetUint8(8, v)
}

func (s Z) Bool() bool {
	return s.Struct.Bit(64)
}

func (s Z) SetBool(v bool) {
	s.Struct.SetUint16(0, 12)
	s.Struct.SetBit(64, v)
}

func (s Z) Text() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Z) HasText() bool {
	if s.Struct.Uint16(0) != 13 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Z) TextBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Z) SetText(v string) error {
	s.Struct.SetUint16(0, 13)
	return s.Struct.SetText(0, v)
}

func (s Z) Blob() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Z) HasBlob() bool {
	if s.Struct.Uint16(0) != 14 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Z) SetBlob(v []byte) error {
	s.Struct.SetUint16(0, 14)
	return s.Struct.SetData(0, v)
}

func (s Z) F64vec() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.Float64List{List: p.List()}, err
}

func (s Z) HasF64vec() bool {
	if s.Struct.Uint16(0) != 15 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Z) SetF64vec(v capnp.Float64List) error {
	s.Struct.SetUint16(0, 15)
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewF64vec sets the f64vec field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s Z) NewF64vec(n int32) (capnp.Float64List, error) {
	s.Struct.SetUint16(0, 15)
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Z) F32vec() (capnp.Float32List, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.Float32List{List: p.List()}, err
}

func (s Z) HasF32vec() bool {
	if s.Struct.Uint16(0) != 16 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Z) SetF32vec(v capnp.Float32List) error {
	s.Struct.SetUint16(0, 16)
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewF32vec sets the f32vec field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s Z) NewF32vec(n int32) (capnp.Float32List, error) {
	s.Struct.SetUint16(0, 16)
	l, err := capnp.NewFloat32List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Z) I64vec() (capnp.Int64List, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.Int64List{List: p.List()}, err
}

func (s Z) HasI64vec() bool {
	if s.Struct.Uint16(0) != 17 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Z) SetI64vec(v capnp.Int64List) error {
	s.Struct.SetUint16(0, 17)
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewI64vec sets the i64vec field to a newly
// allocated capnp.Int64List, preferring placement in s's segment.
func (s Z) NewI64vec(n int32) (capnp.Int64List, error) {
	s.Struct.SetUint16(0, 17)
	l, err := capnp.NewInt64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Int64List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Z) I32vec() (capnp.Int32List, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.Int32List{List: p.List()}, err
}

func (s Z) HasI32vec() bool {
	if s.Struct.Uint16(0) != 18 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Z) SetI32vec(v capnp.Int32List) error {
	s.Struct.SetUint16(0, 18)
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewI32vec sets the i32vec field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s Z) NewI32vec(n int32) (capnp.Int32List, error) {
	s.Struct.SetUint16(0, 18)
	l, err := capnp.NewInt32List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Z) I16vec() (capnp.Int16List, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.Int16List{List: p.List()}, err
}

func (s Z) HasI16vec() bool {
	if s.Struct.Uint16(0) != 19 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Z) SetI16vec(v capnp.Int16List) error {
	s.Struct.SetUint16(0, 19)
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewI16vec sets the i16vec field to a newly
// allocated capnp.Int16List, preferring placement in s's segment.
func (s Z) NewI16vec(n int32) (capnp.Int16List, error) {
	s.Struct.SetUint16(0, 19)
	l, err := capnp.NewInt16List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Int16List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Z) I8vec() (capnp.Int8List, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.Int8List{List: p.List()}, err
}

func (s Z) HasI8vec() bool {
	if s.Struct.Uint16(0) != 20 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Z) SetI8vec(v capnp.Int8List) error {
	s.Struct.SetUint16(0, 20)
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewI8vec sets the i8vec field to a newly
// allocated capnp.Int8List, preferring placement in s's segment.
func (s Z) NewI8vec(n int32) (capnp.Int8List, error) {
	s.Struct.SetUint16(0, 20)
	l, err := capnp.NewInt8List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Int8List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Z) U64vec() (capnp.UInt64List, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.UInt64List{List: p.List()}, err
}

func (s Z) HasU64vec() bool {
	if s.Struct.Uint16(0) != 21 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Z) SetU64vec(v capnp.UInt64List) error {
	s.Struct.SetUint16(0, 21)
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewU64vec sets the u64vec field to a newly
// allocated capnp.UInt64List, preferring placement in s's segment.
func (s Z) NewU64vec(n int32) (capnp.UInt64List, error) {
	s.Struct.SetUint16(0, 21)
	l, err := capnp.NewUInt64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.UInt64List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Z) U32vec() (capnp.UInt32List, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.UInt32List{List: p.List()}, err
}

func (s Z) HasU32vec() bool {
	if s.Struct.Uint16(0) != 22 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Z) SetU32vec(v capnp.UInt32List) error {
	s.Struct.SetUint16(0, 22)
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewU32vec sets the u32vec field to a newly
// allocated capnp.UInt32List, preferring placement in s's segment.
func (s Z) NewU32vec(n int32) (capnp.UInt32List, error) {
	s.Struct.SetUint16(0, 22)
	l, err := capnp.NewUInt32List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.UInt32List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Z) U16vec() (capnp.UInt16List, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.UInt16List{List: p.List()}, err
}

func (s Z) HasU16vec() bool {
	if s.Struct.Uint16(0) != 23 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Z) SetU16vec(v capnp.UInt16List) error {
	s.Struct.SetUint16(0, 23)
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewU16vec sets the u16vec field to a newly
// allocated capnp.UInt16List, preferring placement in s's segment.
func (s Z) NewU16vec(n int32) (capnp.UInt16List, error) {
	s.Struct.SetUint16(0, 23)
	l, err := capnp.NewUInt16List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.UInt16List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Z) U8vec() (capnp.UInt8List, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.UInt8List{List: p.List()}, err
}

func (s Z) HasU8vec() bool {
	if s.Struct.Uint16(0) != 24 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Z) SetU8vec(v capnp.UInt8List) error {
	s.Struct.SetUint16(0, 24)
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewU8vec sets the u8vec field to a newly
// allocated capnp.UInt8List, preferring placement in s's segment.
func (s Z) NewU8vec(n int32) (capnp.UInt8List, error) {
	s.Struct.SetUint16(0, 24)
	l, err := capnp.NewUInt8List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.UInt8List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Z) Boolvec() (capnp.BitList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.BitList{List: p.List()}, err
}

func (s Z) HasBoolvec() bool {
	if s.Struct.Uint16(0) != 39 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Z) SetBoolvec(v capnp.BitList) error {
	s.Struct.SetUint16(0, 39)
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewBoolvec sets the boolvec field to a newly
// allocated capnp.BitList, preferring placement in s's segment.
func (s Z) NewBoolvec(n int32) (capnp.BitList, error) {
	s.Struct.SetUint16(0, 39)
	l, err := capnp.NewBitList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.BitList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Z) Datavec() (capnp.DataList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.DataList{List: p.List()}, err
}

func (s Z) HasDatavec() bool {
	if s.Struct.Uint16(0) != 40 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Z) SetDatavec(v capnp.DataList) error {
	s.Struct.SetUint16(0, 40)
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewDatavec sets the datavec field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s Z) NewDatavec(n int32) (capnp.DataList, error) {
	s.Struct.SetUint16(0, 40)
	l, err := capnp.NewDataList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Z) Textvec() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.TextList{List: p.List()}, err
}

func (s Z) HasTextvec() bool {
	if s.Struct.Uint16(0) != 41 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Z) SetTextvec(v capnp.TextList) error {
	s.Struct.SetUint16(0, 41)
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewTextvec sets the textvec field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Z) NewTextvec(n int32) (capnp.TextList, error) {
	s.Struct.SetUint16(0, 41)
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Z) Zvec() (Z_List, error) {
	p, err := s.Struct.Ptr(0)
	return Z_List{List: p.List()}, err
}

func (s Z) HasZvec() bool {
	if s.Struct.Uint16(0) != 25 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Z) SetZvec(v Z_List) error {
	s.Struct.SetUint16(0, 25)
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewZvec sets the zvec field to a newly
// allocated Z_List, preferring placement in s's segment.
func (s Z) NewZvec(n int32) (Z_List, error) {
	s.Struct.SetUint16(0, 25)
	l, err := NewZ_List(s.Struct.Segment(), n)
	if err != nil {
		return Z_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Z) Zvecvec() (capnp.PointerList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.PointerList{List: p.List()}, err
}

func (s Z) HasZvecvec() bool {
	if s.Struct.Uint16(0) != 26 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Z) SetZvecvec(v capnp.PointerList) error {
	s.Struct.SetUint16(0, 26)
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewZvecvec sets the zvecvec field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s Z) NewZvecvec(n int32) (capnp.PointerList, error) {
	s.Struct.SetUint16(0, 26)
	l, err := capnp.NewPointerList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Z) Zdate() (Zdate, error) {
	p, err := s.Struct.Ptr(0)
	return Zdate{Struct: p.Struct()}, err
}

func (s Z) HasZdate() bool {
	if s.Struct.Uint16(0) != 27 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Z) SetZdate(v Zdate) error {
	s.Struct.SetUint16(0, 27)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewZdate sets the zdate field to a newly
// allocated Zdate struct, preferring placement in s's segment.
func (s Z) NewZdate() (Zdate, error) {
	s.Struct.SetUint16(0, 27)
	ss, err := NewZdate(s.Struct.Segment())
	if err != nil {
		return Zdate{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Z) Zdata() (Zdata, error) {
	p, err := s.Struct.Ptr(0)
	return Zdata{Struct: p.Struct()}, err
}

func (s Z) HasZdata() bool {
	if s.Struct.Uint16(0) != 28 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Z) SetZdata(v Zdata) error {
	s.Struct.SetUint16(0, 28)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewZdata sets the zdata field to a newly
// allocated Zdata struct, preferring placement in s's segment.
func (s Z) NewZdata() (Zdata, error) {
	s.Struct.SetUint16(0, 28)
	ss, err := NewZdata(s.Struct.Segment())
	if err != nil {
		return Zdata{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Z) Aircraftvec() (Aircraft_List, error) {
	p, err := s.Struct.Ptr(0)
	return Aircraft_List{List: p.List()}, err
}

func (s Z) HasAircraftvec() bool {
	if s.Struct.Uint16(0) != 29 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Z) SetAircraftvec(v Aircraft_List) error {
	s.Struct.SetUint16(0, 29)
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewAircraftvec sets the aircraftvec field to a newly
// allocated Aircraft_List, preferring placement in s's segment.
func (s Z) NewAircraftvec(n int32) (Aircraft_List, error) {
	s.Struct.SetUint16(0, 29)
	l, err := NewAircraft_List(s.Struct.Segment(), n)
	if err != nil {
		return Aircraft_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Z) Aircraft() (Aircraft, error) {
	p, err := s.Struct.Ptr(0)
	return Aircraft{Struct: p.Struct()}, err
}

func (s Z) HasAircraft() bool {
	if s.Struct.Uint16(0) != 30 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Z) SetAircraft(v Aircraft) error {
	s.Struct.SetUint16(0, 30)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAircraft sets the aircraft field to a newly
// allocated Aircraft struct, preferring placement in s's segment.
func (s Z) NewAircraft() (Aircraft, error) {
	s.Struct.SetUint16(0, 30)
	ss, err := NewAircraft(s.Struct.Segment())
	if err != nil {
		return Aircraft{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Z) Regression() (Regression, error) {
	p, err := s.Struct.Ptr(0)
	return Regression{Struct: p.Struct()}, err
}

func (s Z) HasRegression() bool {
	if s.Struct.Uint16(0) != 31 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Z) SetRegression(v Regression) error {
	s.Struct.SetUint16(0, 31)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRegression sets the regression field to a newly
// allocated Regression struct, preferring placement in s's segment.
func (s Z) NewRegression() (Regression, error) {
	s.Struct.SetUint16(0, 31)
	ss, err := NewRegression(s.Struct.Segment())
	if err != nil {
		return Regression{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Z) Planebase() (PlaneBase, error) {
	p, err := s.Struct.Ptr(0)
	return PlaneBase{Struct: p.Struct()}, err
}

func (s Z) HasPlanebase() bool {
	if s.Struct.Uint16(0) != 32 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Z) SetPlanebase(v PlaneBase) error {
	s.Struct.SetUint16(0, 32)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPlanebase sets the planebase field to a newly
// allocated PlaneBase struct, preferring placement in s's segment.
func (s Z) NewPlanebase() (PlaneBase, error) {
	s.Struct.SetUint16(0, 32)
	ss, err := NewPlaneBase(s.Struct.Segment())
	if err != nil {
		return PlaneBase{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Z) Airport() Airport {
	return Airport(s.Struct.Uint16(8))
}

func (s Z) SetAirport(v Airport) {
	s.Struct.SetUint16(0, 33)
	s.Struct.SetUint16(8, uint16(v))
}

func (s Z) B737() (B737, error) {
	p, err := s.Struct.Ptr(0)
	return B737{Struct: p.Struct()}, err
}

func (s Z) HasB737() bool {
	if s.Struct.Uint16(0) != 34 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Z) SetB737(v B737) error {
	s.Struct.SetUint16(0, 34)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewB737 sets the b737 field to a newly
// allocated B737 struct, preferring placement in s's segment.
func (s Z) NewB737() (B737, error) {
	s.Struct.SetUint16(0, 34)
	ss, err := NewB737(s.Struct.Segment())
	if err != nil {
		return B737{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Z) A320() (A320, error) {
	p, err := s.Struct.Ptr(0)
	return A320{Struct: p.Struct()}, err
}

func (s Z) HasA320() bool {
	if s.Struct.Uint16(0) != 35 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Z) SetA320(v A320) error {
	s.Struct.SetUint16(0, 35)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewA320 sets the a320 field to a newly
// allocated A320 struct, preferring placement in s's segment.
func (s Z) NewA320() (A320, error) {
	s.Struct.SetUint16(0, 35)
	ss, err := NewA320(s.Struct.Segment())
	if err != nil {
		return A320{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Z) F16() (F16, error) {
	p, err := s.Struct.Ptr(0)
	return F16{Struct: p.Struct()}, err
}

func (s Z) HasF16() bool {
	if s.Struct.Uint16(0) != 36 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Z) SetF16(v F16) error {
	s.Struct.SetUint16(0, 36)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewF16 sets the f16 field to a newly
// allocated F16 struct, preferring placement in s's segment.
func (s Z) NewF16() (F16, error) {
	s.Struct.SetUint16(0, 36)
	ss, err := NewF16(s.Struct.Segment())
	if err != nil {
		return F16{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Z) Zdatevec() (Zdate_List, error) {
	p, err := s.Struct.Ptr(0)
	return Zdate_List{List: p.List()}, err
}

func (s Z) HasZdatevec() bool {
	if s.Struct.Uint16(0) != 37 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Z) SetZdatevec(v Zdate_List) error {
	s.Struct.SetUint16(0, 37)
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewZdatevec sets the zdatevec field to a newly
// allocated Zdate_List, preferring placement in s's segment.
func (s Z) NewZdatevec(n int32) (Zdate_List, error) {
	s.Struct.SetUint16(0, 37)
	l, err := NewZdate_List(s.Struct.Segment(), n)
	if err != nil {
		return Zdate_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Z) Zdatavec() (Zdata_List, error) {
	p, err := s.Struct.Ptr(0)
	return Zdata_List{List: p.List()}, err
}

func (s Z) HasZdatavec() bool {
	if s.Struct.Uint16(0) != 38 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Z) SetZdatavec(v Zdata_List) error {
	s.Struct.SetUint16(0, 38)
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewZdatavec sets the zdatavec field to a newly
// allocated Zdata_List, preferring placement in s's segment.
func (s Z) NewZdatavec(n int32) (Zdata_List, error) {
	s.Struct.SetUint16(0, 38)
	l, err := NewZdata_List(s.Struct.Segment(), n)
	if err != nil {
		return Zdata_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Z) Grp() Z_grp { return Z_grp(s) }

func (s Z) SetGrp() {
	s.Struct.SetUint16(0, 42)
}

func (s Z_grp) First() uint64 {
	return s.Struct.Uint64(8)
}

func (s Z_grp) SetFirst(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s Z_grp) Second() uint64 {
	return s.Struct.Uint64(16)
}

func (s Z_grp) SetSecond(v uint64) {
	s.Struct.SetUint64(16, v)
}

func (s Z) Echo() Echo {
	p, _ := s.Struct.Ptr(0)
	return Echo{Client: p.Interface().Client()}
}

func (s Z) HasEcho() bool {
	if s.Struct.Uint16(0) != 43 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Z) SetEcho(v Echo) error {
	s.Struct.SetUint16(0, 43)
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

func (s Z) Echoes() (capnp.PointerList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.PointerList{List: p.List()}, err
}

func (s Z) HasEchoes() bool {
	if s.Struct.Uint16(0) != 44 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Z) SetEchoes(v capnp.PointerList) error {
	s.Struct.SetUint16(0, 44)
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewEchoes sets the echoes field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s Z) NewEchoes(n int32) (capnp.PointerList, error) {
	s.Struct.SetUint16(0, 44)
	l, err := capnp.NewPointerList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Z) AnyPtr() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s Z) HasAnyPtr() bool {
	if s.Struct.Uint16(0) != 45 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Z) SetAnyPtr(v capnp.Ptr) error {
	s.Struct.SetUint16(0, 45)
	return s.Struct.SetPtr(0, v)
}

func (s Z) AnyStruct() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s Z) HasAnyStruct() bool {
	if s.Struct.Uint16(0) != 46 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Z) SetAnyStruct(v capnp.Ptr) error {
	s.Struct.SetUint16(0, 46)
	return s.Struct.SetPtr(0, v)
}

func (s Z) AnyList() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s Z) HasAnyList() bool {
	if s.Struct.Uint16(0) != 47 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Z) SetAnyList(v capnp.Ptr) error {
	s.Struct.SetUint16(0, 47)
	return s.Struct.SetPtr(0, v)
}

func (s Z) AnyCapability() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s Z) HasAnyCapability() bool {
	if s.Struct.Uint16(0) != 48 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Z) SetAnyCapability(v capnp.Ptr) error {
	s.Struct.SetUint16(0, 48)
	return s.Struct.SetPtr(0, v)
}

// Z_List is a list of Z.
type Z_List struct{ capnp.List }

// NewZ creates a new list of Z.
func NewZ_List(s *capnp.Segment, sz int32) (Z_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return Z_List{l}, err
}

func (s Z_List) At(i int) Z { return Z{s.List.Struct(i)} }

func (s Z_List) Set(i int, v Z) error { return s.List.SetStruct(i, v.Struct) }

func (s Z_List) String() string {
	str, _ := text.MarshalList(0xea26e9973bd6a0d9, s.List)
	return str
}

// Z_Future is a wrapper for a Z promised by a client call.
type Z_Future struct{ *capnp.Future }

func (p Z_Future) Struct() (Z, error) {
	s, err := p.Future.Struct()
	return Z{s}, err
}

func (p Z_Future) Zz() Z_Future {
	return Z_Future{Future: p.Future.Field(0, nil)}
}

func (p Z_Future) Zdate() Zdate_Future {
	return Zdate_Future{Future: p.Future.Field(0, nil)}
}

func (p Z_Future) Zdata() Zdata_Future {
	return Zdata_Future{Future: p.Future.Field(0, nil)}
}

func (p Z_Future) Aircraft() Aircraft_Future {
	return Aircraft_Future{Future: p.Future.Field(0, nil)}
}

func (p Z_Future) Regression() Regression_Future {
	return Regression_Future{Future: p.Future.Field(0, nil)}
}

func (p Z_Future) Planebase() PlaneBase_Future {
	return PlaneBase_Future{Future: p.Future.Field(0, nil)}
}

func (p Z_Future) B737() B737_Future {
	return B737_Future{Future: p.Future.Field(0, nil)}
}

func (p Z_Future) A320() A320_Future {
	return A320_Future{Future: p.Future.Field(0, nil)}
}

func (p Z_Future) F16() F16_Future {
	return F16_Future{Future: p.Future.Field(0, nil)}
}

func (p Z_Future) Grp() Z_grp_Future { return Z_grp_Future{p.Future} }

// Z_grp_Future is a wrapper for a Z_grp promised by a client call.
type Z_grp_Future struct{ *capnp.Future }

func (p Z_grp_Future) Struct() (Z_grp, error) {
	s, err := p.Future.Struct()
	return Z_grp{s}, err
}

func (p Z_Future) Echo() Echo {
	return Echo{Client: p.Future.Field(0, nil).Client()}
}

func (p Z_Future) AnyPtr() *capnp.Future {
	return p.Future.Field(0, nil)
}

func (p Z_Future) AnyStruct() *capnp.Future {
	return p.Future.Field(0, nil)
}

func (p Z_Future) AnyList() *capnp.Future {
	return p.Future.Field(0, nil)
}

func (p Z_Future) AnyCapability() *capnp.Future {
	return p.Future.Field(0, nil)
}

type Counter struct{ capnp.Struct }

// Counter_TypeID is the unique identifier for the type Counter.
const Counter_TypeID = 0x8748bc095e10cb5d

func NewCounter(s *capnp.Segment) (Counter, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Counter{st}, err
}

func NewRootCounter(s *capnp.Segment) (Counter, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Counter{st}, err
}

func ReadRootCounter(msg *capnp.Message) (Counter, error) {
	root, err := msg.Root()
	return Counter{root.Struct()}, err
}

func (s Counter) String() string {
	str, _ := text.Marshal(0x8748bc095e10cb5d, s.Struct)
	return str
}

func (s Counter) Size() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s Counter) SetSize(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

func (s Counter) Words() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Counter) HasWords() bool {
	return s.Struct.HasPtr(0)
}

func (s Counter) WordsBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Counter) SetWords(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Counter) Wordlist() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.TextList{List: p.List()}, err
}

func (s Counter) HasWordlist() bool {
	return s.Struct.HasPtr(1)
}

func (s Counter) SetWordlist(v capnp.TextList) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewWordlist sets the wordlist field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Counter) NewWordlist(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s Counter) Bitlist() (capnp.BitList, error) {
	p, err := s.Struct.Ptr(2)
	return capnp.BitList{List: p.List()}, err
}

func (s Counter) HasBitlist() bool {
	return s.Struct.HasPtr(2)
}

func (s Counter) SetBitlist(v capnp.BitList) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewBitlist sets the bitlist field to a newly
// allocated capnp.BitList, preferring placement in s's segment.
func (s Counter) NewBitlist(n int32) (capnp.BitList, error) {
	l, err := capnp.NewBitList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.BitList{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

// Counter_List is a list of Counter.
type Counter_List struct{ capnp.List }

// NewCounter creates a new list of Counter.
func NewCounter_List(s *capnp.Segment, sz int32) (Counter_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return Counter_List{l}, err
}

func (s Counter_List) At(i int) Counter { return Counter{s.List.Struct(i)} }

func (s Counter_List) Set(i int, v Counter) error { return s.List.SetStruct(i, v.Struct) }

func (s Counter_List) String() string {
	str, _ := text.MarshalList(0x8748bc095e10cb5d, s.List)
	return str
}

// Counter_Future is a wrapper for a Counter promised by a client call.
type Counter_Future struct{ *capnp.Future }

func (p Counter_Future) Struct() (Counter, error) {
	s, err := p.Future.Struct()
	return Counter{s}, err
}

type Bag struct{ capnp.Struct }

// Bag_TypeID is the unique identifier for the type Bag.
const Bag_TypeID = 0xd636fba4f188dabe

func NewBag(s *capnp.Segment) (Bag, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Bag{st}, err
}

func NewRootBag(s *capnp.Segment) (Bag, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Bag{st}, err
}

func ReadRootBag(msg *capnp.Message) (Bag, error) {
	root, err := msg.Root()
	return Bag{root.Struct()}, err
}

func (s Bag) String() string {
	str, _ := text.Marshal(0xd636fba4f188dabe, s.Struct)
	return str
}

func (s Bag) Counter() (Counter, error) {
	p, err := s.Struct.Ptr(0)
	return Counter{Struct: p.Struct()}, err
}

func (s Bag) HasCounter() bool {
	return s.Struct.HasPtr(0)
}

func (s Bag) SetCounter(v Counter) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewCounter sets the counter field to a newly
// allocated Counter struct, preferring placement in s's segment.
func (s Bag) NewCounter() (Counter, error) {
	ss, err := NewCounter(s.Struct.Segment())
	if err != nil {
		return Counter{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Bag_List is a list of Bag.
type Bag_List struct{ capnp.List }

// NewBag creates a new list of Bag.
func NewBag_List(s *capnp.Segment, sz int32) (Bag_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Bag_List{l}, err
}

func (s Bag_List) At(i int) Bag { return Bag{s.List.Struct(i)} }

func (s Bag_List) Set(i int, v Bag) error { return s.List.SetStruct(i, v.Struct) }

func (s Bag_List) String() string {
	str, _ := text.MarshalList(0xd636fba4f188dabe, s.List)
	return str
}

// Bag_Future is a wrapper for a Bag promised by a client call.
type Bag_Future struct{ *capnp.Future }

func (p Bag_Future) Struct() (Bag, error) {
	s, err := p.Future.Struct()
	return Bag{s}, err
}

func (p Bag_Future) Counter() Counter_Future {
	return Counter_Future{Future: p.Future.Field(0, nil)}
}

type Zserver struct{ capnp.Struct }

// Zserver_TypeID is the unique identifier for the type Zserver.
const Zserver_TypeID = 0xcc4411e60ba9c498

func NewZserver(s *capnp.Segment) (Zserver, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Zserver{st}, err
}

func NewRootZserver(s *capnp.Segment) (Zserver, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Zserver{st}, err
}

func ReadRootZserver(msg *capnp.Message) (Zserver, error) {
	root, err := msg.Root()
	return Zserver{root.Struct()}, err
}

func (s Zserver) String() string {
	str, _ := text.Marshal(0xcc4411e60ba9c498, s.Struct)
	return str
}

func (s Zserver) Waitingjobs() (Zjob_List, error) {
	p, err := s.Struct.Ptr(0)
	return Zjob_List{List: p.List()}, err
}

func (s Zserver) HasWaitingjobs() bool {
	return s.Struct.HasPtr(0)
}

func (s Zserver) SetWaitingjobs(v Zjob_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewWaitingjobs sets the waitingjobs field to a newly
// allocated Zjob_List, preferring placement in s's segment.
func (s Zserver) NewWaitingjobs(n int32) (Zjob_List, error) {
	l, err := NewZjob_List(s.Struct.Segment(), n)
	if err != nil {
		return Zjob_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Zserver_List is a list of Zserver.
type Zserver_List struct{ capnp.List }

// NewZserver creates a new list of Zserver.
func NewZserver_List(s *capnp.Segment, sz int32) (Zserver_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Zserver_List{l}, err
}

func (s Zserver_List) At(i int) Zserver { return Zserver{s.List.Struct(i)} }

func (s Zserver_List) Set(i int, v Zserver) error { return s.List.SetStruct(i, v.Struct) }

func (s Zserver_List) String() string {
	str, _ := text.MarshalList(0xcc4411e60ba9c498, s.List)
	return str
}

// Zserver_Future is a wrapper for a Zserver promised by a client call.
type Zserver_Future struct{ *capnp.Future }

func (p Zserver_Future) Struct() (Zserver, error) {
	s, err := p.Future.Struct()
	return Zserver{s}, err
}

type Zjob struct{ capnp.Struct }

// Zjob_TypeID is the unique identifier for the type Zjob.
const Zjob_TypeID = 0xddd1416669fb7613

func NewZjob(s *capnp.Segment) (Zjob, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Zjob{st}, err
}

func NewRootZjob(s *capnp.Segment) (Zjob, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Zjob{st}, err
}

func ReadRootZjob(msg *capnp.Message) (Zjob, error) {
	root, err := msg.Root()
	return Zjob{root.Struct()}, err
}

func (s Zjob) String() string {
	str, _ := text.Marshal(0xddd1416669fb7613, s.Struct)
	return str
}

func (s Zjob) Cmd() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Zjob) HasCmd() bool {
	return s.Struct.HasPtr(0)
}

func (s Zjob) CmdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Zjob) SetCmd(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Zjob) Args() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.TextList{List: p.List()}, err
}

func (s Zjob) HasArgs() bool {
	return s.Struct.HasPtr(1)
}

func (s Zjob) SetArgs(v capnp.TextList) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewArgs sets the args field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Zjob) NewArgs(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// Zjob_List is a list of Zjob.
type Zjob_List struct{ capnp.List }

// NewZjob creates a new list of Zjob.
func NewZjob_List(s *capnp.Segment, sz int32) (Zjob_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Zjob_List{l}, err
}

func (s Zjob_List) At(i int) Zjob { return Zjob{s.List.Struct(i)} }

func (s Zjob_List) Set(i int, v Zjob) error { return s.List.SetStruct(i, v.Struct) }

func (s Zjob_List) String() string {
	str, _ := text.MarshalList(0xddd1416669fb7613, s.List)
	return str
}

// Zjob_Future is a wrapper for a Zjob promised by a client call.
type Zjob_Future struct{ *capnp.Future }

func (p Zjob_Future) Struct() (Zjob, error) {
	s, err := p.Future.Struct()
	return Zjob{s}, err
}

type VerEmpty struct{ capnp.Struct }

// VerEmpty_TypeID is the unique identifier for the type VerEmpty.
const VerEmpty_TypeID = 0x93c99951eacc72ff

func NewVerEmpty(s *capnp.Segment) (VerEmpty, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return VerEmpty{st}, err
}

func NewRootVerEmpty(s *capnp.Segment) (VerEmpty, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return VerEmpty{st}, err
}

func ReadRootVerEmpty(msg *capnp.Message) (VerEmpty, error) {
	root, err := msg.Root()
	return VerEmpty{root.Struct()}, err
}

func (s VerEmpty) String() string {
	str, _ := text.Marshal(0x93c99951eacc72ff, s.Struct)
	return str
}

// VerEmpty_List is a list of VerEmpty.
type VerEmpty_List struct{ capnp.List }

// NewVerEmpty creates a new list of VerEmpty.
func NewVerEmpty_List(s *capnp.Segment, sz int32) (VerEmpty_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return VerEmpty_List{l}, err
}

func (s VerEmpty_List) At(i int) VerEmpty { return VerEmpty{s.List.Struct(i)} }

func (s VerEmpty_List) Set(i int, v VerEmpty) error { return s.List.SetStruct(i, v.Struct) }

func (s VerEmpty_List) String() string {
	str, _ := text.MarshalList(0x93c99951eacc72ff, s.List)
	return str
}

// VerEmpty_Future is a wrapper for a VerEmpty promised by a client call.
type VerEmpty_Future struct{ *capnp.Future }

func (p VerEmpty_Future) Struct() (VerEmpty, error) {
	s, err := p.Future.Struct()
	return VerEmpty{s}, err
}

type VerOneData struct{ capnp.Struct }

// VerOneData_TypeID is the unique identifier for the type VerOneData.
const VerOneData_TypeID = 0xfca3742893be4cde

func NewVerOneData(s *capnp.Segment) (VerOneData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return VerOneData{st}, err
}

func NewRootVerOneData(s *capnp.Segment) (VerOneData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return VerOneData{st}, err
}

func ReadRootVerOneData(msg *capnp.Message) (VerOneData, error) {
	root, err := msg.Root()
	return VerOneData{root.Struct()}, err
}

func (s VerOneData) String() string {
	str, _ := text.Marshal(0xfca3742893be4cde, s.Struct)
	return str
}

func (s VerOneData) Val() int16 {
	return int16(s.Struct.Uint16(0))
}

func (s VerOneData) SetVal(v int16) {
	s.Struct.SetUint16(0, uint16(v))
}

// VerOneData_List is a list of VerOneData.
type VerOneData_List struct{ capnp.List }

// NewVerOneData creates a new list of VerOneData.
func NewVerOneData_List(s *capnp.Segment, sz int32) (VerOneData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return VerOneData_List{l}, err
}

func (s VerOneData_List) At(i int) VerOneData { return VerOneData{s.List.Struct(i)} }

func (s VerOneData_List) Set(i int, v VerOneData) error { return s.List.SetStruct(i, v.Struct) }

func (s VerOneData_List) String() string {
	str, _ := text.MarshalList(0xfca3742893be4cde, s.List)
	return str
}

// VerOneData_Future is a wrapper for a VerOneData promised by a client call.
type VerOneData_Future struct{ *capnp.Future }

func (p VerOneData_Future) Struct() (VerOneData, error) {
	s, err := p.Future.Struct()
	return VerOneData{s}, err
}

type VerTwoData struct{ capnp.Struct }

// VerTwoData_TypeID is the unique identifier for the type VerTwoData.
const VerTwoData_TypeID = 0xf705dc45c94766fd

func NewVerTwoData(s *capnp.Segment) (VerTwoData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return VerTwoData{st}, err
}

func NewRootVerTwoData(s *capnp.Segment) (VerTwoData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return VerTwoData{st}, err
}

func ReadRootVerTwoData(msg *capnp.Message) (VerTwoData, error) {
	root, err := msg.Root()
	return VerTwoData{root.Struct()}, err
}

func (s VerTwoData) String() string {
	str, _ := text.Marshal(0xf705dc45c94766fd, s.Struct)
	return str
}

func (s VerTwoData) Val() int16 {
	return int16(s.Struct.Uint16(0))
}

func (s VerTwoData) SetVal(v int16) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s VerTwoData) Duo() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s VerTwoData) SetDuo(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

// VerTwoData_List is a list of VerTwoData.
type VerTwoData_List struct{ capnp.List }

// NewVerTwoData creates a new list of VerTwoData.
func NewVerTwoData_List(s *capnp.Segment, sz int32) (VerTwoData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return VerTwoData_List{l}, err
}

func (s VerTwoData_List) At(i int) VerTwoData { return VerTwoData{s.List.Struct(i)} }

func (s VerTwoData_List) Set(i int, v VerTwoData) error { return s.List.SetStruct(i, v.Struct) }

func (s VerTwoData_List) String() string {
	str, _ := text.MarshalList(0xf705dc45c94766fd, s.List)
	return str
}

// VerTwoData_Future is a wrapper for a VerTwoData promised by a client call.
type VerTwoData_Future struct{ *capnp.Future }

func (p VerTwoData_Future) Struct() (VerTwoData, error) {
	s, err := p.Future.Struct()
	return VerTwoData{s}, err
}

type VerOnePtr struct{ capnp.Struct }

// VerOnePtr_TypeID is the unique identifier for the type VerOnePtr.
const VerOnePtr_TypeID = 0x94bf7df83408218d

func NewVerOnePtr(s *capnp.Segment) (VerOnePtr, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return VerOnePtr{st}, err
}

func NewRootVerOnePtr(s *capnp.Segment) (VerOnePtr, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return VerOnePtr{st}, err
}

func ReadRootVerOnePtr(msg *capnp.Message) (VerOnePtr, error) {
	root, err := msg.Root()
	return VerOnePtr{root.Struct()}, err
}

func (s VerOnePtr) String() string {
	str, _ := text.Marshal(0x94bf7df83408218d, s.Struct)
	return str
}

func (s VerOnePtr) Ptr() (VerOneData, error) {
	p, err := s.Struct.Ptr(0)
	return VerOneData{Struct: p.Struct()}, err
}

func (s VerOnePtr) HasPtr() bool {
	return s.Struct.HasPtr(0)
}

func (s VerOnePtr) SetPtr(v VerOneData) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPtr sets the ptr field to a newly
// allocated VerOneData struct, preferring placement in s's segment.
func (s VerOnePtr) NewPtr() (VerOneData, error) {
	ss, err := NewVerOneData(s.Struct.Segment())
	if err != nil {
		return VerOneData{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// VerOnePtr_List is a list of VerOnePtr.
type VerOnePtr_List struct{ capnp.List }

// NewVerOnePtr creates a new list of VerOnePtr.
func NewVerOnePtr_List(s *capnp.Segment, sz int32) (VerOnePtr_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return VerOnePtr_List{l}, err
}

func (s VerOnePtr_List) At(i int) VerOnePtr { return VerOnePtr{s.List.Struct(i)} }

func (s VerOnePtr_List) Set(i int, v VerOnePtr) error { return s.List.SetStruct(i, v.Struct) }

func (s VerOnePtr_List) String() string {
	str, _ := text.MarshalList(0x94bf7df83408218d, s.List)
	return str
}

// VerOnePtr_Future is a wrapper for a VerOnePtr promised by a client call.
type VerOnePtr_Future struct{ *capnp.Future }

func (p VerOnePtr_Future) Struct() (VerOnePtr, error) {
	s, err := p.Future.Struct()
	return VerOnePtr{s}, err
}

func (p VerOnePtr_Future) Ptr() VerOneData_Future {
	return VerOneData_Future{Future: p.Future.Field(0, nil)}
}

type VerTwoPtr struct{ capnp.Struct }

// VerTwoPtr_TypeID is the unique identifier for the type VerTwoPtr.
const VerTwoPtr_TypeID = 0xc95babe3bd394d2d

func NewVerTwoPtr(s *capnp.Segment) (VerTwoPtr, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return VerTwoPtr{st}, err
}

func NewRootVerTwoPtr(s *capnp.Segment) (VerTwoPtr, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return VerTwoPtr{st}, err
}

func ReadRootVerTwoPtr(msg *capnp.Message) (VerTwoPtr, error) {
	root, err := msg.Root()
	return VerTwoPtr{root.Struct()}, err
}

func (s VerTwoPtr) String() string {
	str, _ := text.Marshal(0xc95babe3bd394d2d, s.Struct)
	return str
}

func (s VerTwoPtr) Ptr1() (VerOneData, error) {
	p, err := s.Struct.Ptr(0)
	return VerOneData{Struct: p.Struct()}, err
}

func (s VerTwoPtr) HasPtr1() bool {
	return s.Struct.HasPtr(0)
}

func (s VerTwoPtr) SetPtr1(v VerOneData) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPtr1 sets the ptr1 field to a newly
// allocated VerOneData struct, preferring placement in s's segment.
func (s VerTwoPtr) NewPtr1() (VerOneData, error) {
	ss, err := NewVerOneData(s.Struct.Segment())
	if err != nil {
		return VerOneData{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s VerTwoPtr) Ptr2() (VerOneData, error) {
	p, err := s.Struct.Ptr(1)
	return VerOneData{Struct: p.Struct()}, err
}

func (s VerTwoPtr) HasPtr2() bool {
	return s.Struct.HasPtr(1)
}

func (s VerTwoPtr) SetPtr2(v VerOneData) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewPtr2 sets the ptr2 field to a newly
// allocated VerOneData struct, preferring placement in s's segment.
func (s VerTwoPtr) NewPtr2() (VerOneData, error) {
	ss, err := NewVerOneData(s.Struct.Segment())
	if err != nil {
		return VerOneData{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// VerTwoPtr_List is a list of VerTwoPtr.
type VerTwoPtr_List struct{ capnp.List }

// NewVerTwoPtr creates a new list of VerTwoPtr.
func NewVerTwoPtr_List(s *capnp.Segment, sz int32) (VerTwoPtr_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return VerTwoPtr_List{l}, err
}

func (s VerTwoPtr_List) At(i int) VerTwoPtr { return VerTwoPtr{s.List.Struct(i)} }

func (s VerTwoPtr_List) Set(i int, v VerTwoPtr) error { return s.List.SetStruct(i, v.Struct) }

func (s VerTwoPtr_List) String() string {
	str, _ := text.MarshalList(0xc95babe3bd394d2d, s.List)
	return str
}

// VerTwoPtr_Future is a wrapper for a VerTwoPtr promised by a client call.
type VerTwoPtr_Future struct{ *capnp.Future }

func (p VerTwoPtr_Future) Struct() (VerTwoPtr, error) {
	s, err := p.Future.Struct()
	return VerTwoPtr{s}, err
}

func (p VerTwoPtr_Future) Ptr1() VerOneData_Future {
	return VerOneData_Future{Future: p.Future.Field(0, nil)}
}

func (p VerTwoPtr_Future) Ptr2() VerOneData_Future {
	return VerOneData_Future{Future: p.Future.Field(1, nil)}
}

type VerTwoDataTwoPtr struct{ capnp.Struct }

// VerTwoDataTwoPtr_TypeID is the unique identifier for the type VerTwoDataTwoPtr.
const VerTwoDataTwoPtr_TypeID = 0xb61ee2ecff34ca73

func NewVerTwoDataTwoPtr(s *capnp.Segment) (VerTwoDataTwoPtr, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return VerTwoDataTwoPtr{st}, err
}

func NewRootVerTwoDataTwoPtr(s *capnp.Segment) (VerTwoDataTwoPtr, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return VerTwoDataTwoPtr{st}, err
}

func ReadRootVerTwoDataTwoPtr(msg *capnp.Message) (VerTwoDataTwoPtr, error) {
	root, err := msg.Root()
	return VerTwoDataTwoPtr{root.Struct()}, err
}

func (s VerTwoDataTwoPtr) String() string {
	str, _ := text.Marshal(0xb61ee2ecff34ca73, s.Struct)
	return str
}

func (s VerTwoDataTwoPtr) Val() int16 {
	return int16(s.Struct.Uint16(0))
}

func (s VerTwoDataTwoPtr) SetVal(v int16) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s VerTwoDataTwoPtr) Duo() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s VerTwoDataTwoPtr) SetDuo(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

func (s VerTwoDataTwoPtr) Ptr1() (VerOneData, error) {
	p, err := s.Struct.Ptr(0)
	return VerOneData{Struct: p.Struct()}, err
}

func (s VerTwoDataTwoPtr) HasPtr1() bool {
	return s.Struct.HasPtr(0)
}

func (s VerTwoDataTwoPtr) SetPtr1(v VerOneData) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPtr1 sets the ptr1 field to a newly
// allocated VerOneData struct, preferring placement in s's segment.
func (s VerTwoDataTwoPtr) NewPtr1() (VerOneData, error) {
	ss, err := NewVerOneData(s.Struct.Segment())
	if err != nil {
		return VerOneData{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s VerTwoDataTwoPtr) Ptr2() (VerOneData, error) {
	p, err := s.Struct.Ptr(1)
	return VerOneData{Struct: p.Struct()}, err
}

func (s VerTwoDataTwoPtr) HasPtr2() bool {
	return s.Struct.HasPtr(1)
}

func (s VerTwoDataTwoPtr) SetPtr2(v VerOneData) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewPtr2 sets the ptr2 field to a newly
// allocated VerOneData struct, preferring placement in s's segment.
func (s VerTwoDataTwoPtr) NewPtr2() (VerOneData, error) {
	ss, err := NewVerOneData(s.Struct.Segment())
	if err != nil {
		return VerOneData{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// VerTwoDataTwoPtr_List is a list of VerTwoDataTwoPtr.
type VerTwoDataTwoPtr_List struct{ capnp.List }

// NewVerTwoDataTwoPtr creates a new list of VerTwoDataTwoPtr.
func NewVerTwoDataTwoPtr_List(s *capnp.Segment, sz int32) (VerTwoDataTwoPtr_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return VerTwoDataTwoPtr_List{l}, err
}

func (s VerTwoDataTwoPtr_List) At(i int) VerTwoDataTwoPtr { return VerTwoDataTwoPtr{s.List.Struct(i)} }

func (s VerTwoDataTwoPtr_List) Set(i int, v VerTwoDataTwoPtr) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s VerTwoDataTwoPtr_List) String() string {
	str, _ := text.MarshalList(0xb61ee2ecff34ca73, s.List)
	return str
}

// VerTwoDataTwoPtr_Future is a wrapper for a VerTwoDataTwoPtr promised by a client call.
type VerTwoDataTwoPtr_Future struct{ *capnp.Future }

func (p VerTwoDataTwoPtr_Future) Struct() (VerTwoDataTwoPtr, error) {
	s, err := p.Future.Struct()
	return VerTwoDataTwoPtr{s}, err
}

func (p VerTwoDataTwoPtr_Future) Ptr1() VerOneData_Future {
	return VerOneData_Future{Future: p.Future.Field(0, nil)}
}

func (p VerTwoDataTwoPtr_Future) Ptr2() VerOneData_Future {
	return VerOneData_Future{Future: p.Future.Field(1, nil)}
}

type HoldsVerEmptyList struct{ capnp.Struct }

// HoldsVerEmptyList_TypeID is the unique identifier for the type HoldsVerEmptyList.
const HoldsVerEmptyList_TypeID = 0xde9ed43cfaa83093

func NewHoldsVerEmptyList(s *capnp.Segment) (HoldsVerEmptyList, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return HoldsVerEmptyList{st}, err
}

func NewRootHoldsVerEmptyList(s *capnp.Segment) (HoldsVerEmptyList, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return HoldsVerEmptyList{st}, err
}

func ReadRootHoldsVerEmptyList(msg *capnp.Message) (HoldsVerEmptyList, error) {
	root, err := msg.Root()
	return HoldsVerEmptyList{root.Struct()}, err
}

func (s HoldsVerEmptyList) String() string {
	str, _ := text.Marshal(0xde9ed43cfaa83093, s.Struct)
	return str
}

func (s HoldsVerEmptyList) Mylist() (VerEmpty_List, error) {
	p, err := s.Struct.Ptr(0)
	return VerEmpty_List{List: p.List()}, err
}

func (s HoldsVerEmptyList) HasMylist() bool {
	return s.Struct.HasPtr(0)
}

func (s HoldsVerEmptyList) SetMylist(v VerEmpty_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewMylist sets the mylist field to a newly
// allocated VerEmpty_List, preferring placement in s's segment.
func (s HoldsVerEmptyList) NewMylist(n int32) (VerEmpty_List, error) {
	l, err := NewVerEmpty_List(s.Struct.Segment(), n)
	if err != nil {
		return VerEmpty_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// HoldsVerEmptyList_List is a list of HoldsVerEmptyList.
type HoldsVerEmptyList_List struct{ capnp.List }

// NewHoldsVerEmptyList creates a new list of HoldsVerEmptyList.
func NewHoldsVerEmptyList_List(s *capnp.Segment, sz int32) (HoldsVerEmptyList_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return HoldsVerEmptyList_List{l}, err
}

func (s HoldsVerEmptyList_List) At(i int) HoldsVerEmptyList {
	return HoldsVerEmptyList{s.List.Struct(i)}
}

func (s HoldsVerEmptyList_List) Set(i int, v HoldsVerEmptyList) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s HoldsVerEmptyList_List) String() string {
	str, _ := text.MarshalList(0xde9ed43cfaa83093, s.List)
	return str
}

// HoldsVerEmptyList_Future is a wrapper for a HoldsVerEmptyList promised by a client call.
type HoldsVerEmptyList_Future struct{ *capnp.Future }

func (p HoldsVerEmptyList_Future) Struct() (HoldsVerEmptyList, error) {
	s, err := p.Future.Struct()
	return HoldsVerEmptyList{s}, err
}

type HoldsVerOneDataList struct{ capnp.Struct }

// HoldsVerOneDataList_TypeID is the unique identifier for the type HoldsVerOneDataList.
const HoldsVerOneDataList_TypeID = 0xabd055422a4d7df1

func NewHoldsVerOneDataList(s *capnp.Segment) (HoldsVerOneDataList, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return HoldsVerOneDataList{st}, err
}

func NewRootHoldsVerOneDataList(s *capnp.Segment) (HoldsVerOneDataList, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return HoldsVerOneDataList{st}, err
}

func ReadRootHoldsVerOneDataList(msg *capnp.Message) (HoldsVerOneDataList, error) {
	root, err := msg.Root()
	return HoldsVerOneDataList{root.Struct()}, err
}

func (s HoldsVerOneDataList) String() string {
	str, _ := text.Marshal(0xabd055422a4d7df1, s.Struct)
	return str
}

func (s HoldsVerOneDataList) Mylist() (VerOneData_List, error) {
	p, err := s.Struct.Ptr(0)
	return VerOneData_List{List: p.List()}, err
}

func (s HoldsVerOneDataList) HasMylist() bool {
	return s.Struct.HasPtr(0)
}

func (s HoldsVerOneDataList) SetMylist(v VerOneData_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewMylist sets the mylist field to a newly
// allocated VerOneData_List, preferring placement in s's segment.
func (s HoldsVerOneDataList) NewMylist(n int32) (VerOneData_List, error) {
	l, err := NewVerOneData_List(s.Struct.Segment(), n)
	if err != nil {
		return VerOneData_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// HoldsVerOneDataList_List is a list of HoldsVerOneDataList.
type HoldsVerOneDataList_List struct{ capnp.List }

// NewHoldsVerOneDataList creates a new list of HoldsVerOneDataList.
func NewHoldsVerOneDataList_List(s *capnp.Segment, sz int32) (HoldsVerOneDataList_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return HoldsVerOneDataList_List{l}, err
}

func (s HoldsVerOneDataList_List) At(i int) HoldsVerOneDataList {
	return HoldsVerOneDataList{s.List.Struct(i)}
}

func (s HoldsVerOneDataList_List) Set(i int, v HoldsVerOneDataList) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s HoldsVerOneDataList_List) String() string {
	str, _ := text.MarshalList(0xabd055422a4d7df1, s.List)
	return str
}

// HoldsVerOneDataList_Future is a wrapper for a HoldsVerOneDataList promised by a client call.
type HoldsVerOneDataList_Future struct{ *capnp.Future }

func (p HoldsVerOneDataList_Future) Struct() (HoldsVerOneDataList, error) {
	s, err := p.Future.Struct()
	return HoldsVerOneDataList{s}, err
}

type HoldsVerTwoDataList struct{ capnp.Struct }

// HoldsVerTwoDataList_TypeID is the unique identifier for the type HoldsVerTwoDataList.
const HoldsVerTwoDataList_TypeID = 0xcbdc765fd5dff7ba

func NewHoldsVerTwoDataList(s *capnp.Segment) (HoldsVerTwoDataList, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return HoldsVerTwoDataList{st}, err
}

func NewRootHoldsVerTwoDataList(s *capnp.Segment) (HoldsVerTwoDataList, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return HoldsVerTwoDataList{st}, err
}

func ReadRootHoldsVerTwoDataList(msg *capnp.Message) (HoldsVerTwoDataList, error) {
	root, err := msg.Root()
	return HoldsVerTwoDataList{root.Struct()}, err
}

func (s HoldsVerTwoDataList) String() string {
	str, _ := text.Marshal(0xcbdc765fd5dff7ba, s.Struct)
	return str
}

func (s HoldsVerTwoDataList) Mylist() (VerTwoData_List, error) {
	p, err := s.Struct.Ptr(0)
	return VerTwoData_List{List: p.List()}, err
}

func (s HoldsVerTwoDataList) HasMylist() bool {
	return s.Struct.HasPtr(0)
}

func (s HoldsVerTwoDataList) SetMylist(v VerTwoData_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewMylist sets the mylist field to a newly
// allocated VerTwoData_List, preferring placement in s's segment.
func (s HoldsVerTwoDataList) NewMylist(n int32) (VerTwoData_List, error) {
	l, err := NewVerTwoData_List(s.Struct.Segment(), n)
	if err != nil {
		return VerTwoData_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// HoldsVerTwoDataList_List is a list of HoldsVerTwoDataList.
type HoldsVerTwoDataList_List struct{ capnp.List }

// NewHoldsVerTwoDataList creates a new list of HoldsVerTwoDataList.
func NewHoldsVerTwoDataList_List(s *capnp.Segment, sz int32) (HoldsVerTwoDataList_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return HoldsVerTwoDataList_List{l}, err
}

func (s HoldsVerTwoDataList_List) At(i int) HoldsVerTwoDataList {
	return HoldsVerTwoDataList{s.List.Struct(i)}
}

func (s HoldsVerTwoDataList_List) Set(i int, v HoldsVerTwoDataList) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s HoldsVerTwoDataList_List) String() string {
	str, _ := text.MarshalList(0xcbdc765fd5dff7ba, s.List)
	return str
}

// HoldsVerTwoDataList_Future is a wrapper for a HoldsVerTwoDataList promised by a client call.
type HoldsVerTwoDataList_Future struct{ *capnp.Future }

func (p HoldsVerTwoDataList_Future) Struct() (HoldsVerTwoDataList, error) {
	s, err := p.Future.Struct()
	return HoldsVerTwoDataList{s}, err
}

type HoldsVerOnePtrList struct{ capnp.Struct }

// HoldsVerOnePtrList_TypeID is the unique identifier for the type HoldsVerOnePtrList.
const HoldsVerOnePtrList_TypeID = 0xe508a29c83a059f8

func NewHoldsVerOnePtrList(s *capnp.Segment) (HoldsVerOnePtrList, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return HoldsVerOnePtrList{st}, err
}

func NewRootHoldsVerOnePtrList(s *capnp.Segment) (HoldsVerOnePtrList, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return HoldsVerOnePtrList{st}, err
}

func ReadRootHoldsVerOnePtrList(msg *capnp.Message) (HoldsVerOnePtrList, error) {
	root, err := msg.Root()
	return HoldsVerOnePtrList{root.Struct()}, err
}

func (s HoldsVerOnePtrList) String() string {
	str, _ := text.Marshal(0xe508a29c83a059f8, s.Struct)
	return str
}

func (s HoldsVerOnePtrList) Mylist() (VerOnePtr_List, error) {
	p, err := s.Struct.Ptr(0)
	return VerOnePtr_List{List: p.List()}, err
}

func (s HoldsVerOnePtrList) HasMylist() bool {
	return s.Struct.HasPtr(0)
}

func (s HoldsVerOnePtrList) SetMylist(v VerOnePtr_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewMylist sets the mylist field to a newly
// allocated VerOnePtr_List, preferring placement in s's segment.
func (s HoldsVerOnePtrList) NewMylist(n int32) (VerOnePtr_List, error) {
	l, err := NewVerOnePtr_List(s.Struct.Segment(), n)
	if err != nil {
		return VerOnePtr_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// HoldsVerOnePtrList_List is a list of HoldsVerOnePtrList.
type HoldsVerOnePtrList_List struct{ capnp.List }

// NewHoldsVerOnePtrList creates a new list of HoldsVerOnePtrList.
func NewHoldsVerOnePtrList_List(s *capnp.Segment, sz int32) (HoldsVerOnePtrList_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return HoldsVerOnePtrList_List{l}, err
}

func (s HoldsVerOnePtrList_List) At(i int) HoldsVerOnePtrList {
	return HoldsVerOnePtrList{s.List.Struct(i)}
}

func (s HoldsVerOnePtrList_List) Set(i int, v HoldsVerOnePtrList) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s HoldsVerOnePtrList_List) String() string {
	str, _ := text.MarshalList(0xe508a29c83a059f8, s.List)
	return str
}

// HoldsVerOnePtrList_Future is a wrapper for a HoldsVerOnePtrList promised by a client call.
type HoldsVerOnePtrList_Future struct{ *capnp.Future }

func (p HoldsVerOnePtrList_Future) Struct() (HoldsVerOnePtrList, error) {
	s, err := p.Future.Struct()
	return HoldsVerOnePtrList{s}, err
}

type HoldsVerTwoPtrList struct{ capnp.Struct }

// HoldsVerTwoPtrList_TypeID is the unique identifier for the type HoldsVerTwoPtrList.
const HoldsVerTwoPtrList_TypeID = 0xcf9beaca1cc180c8

func NewHoldsVerTwoPtrList(s *capnp.Segment) (HoldsVerTwoPtrList, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return HoldsVerTwoPtrList{st}, err
}

func NewRootHoldsVerTwoPtrList(s *capnp.Segment) (HoldsVerTwoPtrList, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return HoldsVerTwoPtrList{st}, err
}

func ReadRootHoldsVerTwoPtrList(msg *capnp.Message) (HoldsVerTwoPtrList, error) {
	root, err := msg.Root()
	return HoldsVerTwoPtrList{root.Struct()}, err
}

func (s HoldsVerTwoPtrList) String() string {
	str, _ := text.Marshal(0xcf9beaca1cc180c8, s.Struct)
	return str
}

func (s HoldsVerTwoPtrList) Mylist() (VerTwoPtr_List, error) {
	p, err := s.Struct.Ptr(0)
	return VerTwoPtr_List{List: p.List()}, err
}

func (s HoldsVerTwoPtrList) HasMylist() bool {
	return s.Struct.HasPtr(0)
}

func (s HoldsVerTwoPtrList) SetMylist(v VerTwoPtr_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewMylist sets the mylist field to a newly
// allocated VerTwoPtr_List, preferring placement in s's segment.
func (s HoldsVerTwoPtrList) NewMylist(n int32) (VerTwoPtr_List, error) {
	l, err := NewVerTwoPtr_List(s.Struct.Segment(), n)
	if err != nil {
		return VerTwoPtr_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// HoldsVerTwoPtrList_List is a list of HoldsVerTwoPtrList.
type HoldsVerTwoPtrList_List struct{ capnp.List }

// NewHoldsVerTwoPtrList creates a new list of HoldsVerTwoPtrList.
func NewHoldsVerTwoPtrList_List(s *capnp.Segment, sz int32) (HoldsVerTwoPtrList_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return HoldsVerTwoPtrList_List{l}, err
}

func (s HoldsVerTwoPtrList_List) At(i int) HoldsVerTwoPtrList {
	return HoldsVerTwoPtrList{s.List.Struct(i)}
}

func (s HoldsVerTwoPtrList_List) Set(i int, v HoldsVerTwoPtrList) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s HoldsVerTwoPtrList_List) String() string {
	str, _ := text.MarshalList(0xcf9beaca1cc180c8, s.List)
	return str
}

// HoldsVerTwoPtrList_Future is a wrapper for a HoldsVerTwoPtrList promised by a client call.
type HoldsVerTwoPtrList_Future struct{ *capnp.Future }

func (p HoldsVerTwoPtrList_Future) Struct() (HoldsVerTwoPtrList, error) {
	s, err := p.Future.Struct()
	return HoldsVerTwoPtrList{s}, err
}

type HoldsVerTwoTwoList struct{ capnp.Struct }

// HoldsVerTwoTwoList_TypeID is the unique identifier for the type HoldsVerTwoTwoList.
const HoldsVerTwoTwoList_TypeID = 0x95befe3f14606e6b

func NewHoldsVerTwoTwoList(s *capnp.Segment) (HoldsVerTwoTwoList, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return HoldsVerTwoTwoList{st}, err
}

func NewRootHoldsVerTwoTwoList(s *capnp.Segment) (HoldsVerTwoTwoList, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return HoldsVerTwoTwoList{st}, err
}

func ReadRootHoldsVerTwoTwoList(msg *capnp.Message) (HoldsVerTwoTwoList, error) {
	root, err := msg.Root()
	return HoldsVerTwoTwoList{root.Struct()}, err
}

func (s HoldsVerTwoTwoList) String() string {
	str, _ := text.Marshal(0x95befe3f14606e6b, s.Struct)
	return str
}

func (s HoldsVerTwoTwoList) Mylist() (VerTwoDataTwoPtr_List, error) {
	p, err := s.Struct.Ptr(0)
	return VerTwoDataTwoPtr_List{List: p.List()}, err
}

func (s HoldsVerTwoTwoList) HasMylist() bool {
	return s.Struct.HasPtr(0)
}

func (s HoldsVerTwoTwoList) SetMylist(v VerTwoDataTwoPtr_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewMylist sets the mylist field to a newly
// allocated VerTwoDataTwoPtr_List, preferring placement in s's segment.
func (s HoldsVerTwoTwoList) NewMylist(n int32) (VerTwoDataTwoPtr_List, error) {
	l, err := NewVerTwoDataTwoPtr_List(s.Struct.Segment(), n)
	if err != nil {
		return VerTwoDataTwoPtr_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// HoldsVerTwoTwoList_List is a list of HoldsVerTwoTwoList.
type HoldsVerTwoTwoList_List struct{ capnp.List }

// NewHoldsVerTwoTwoList creates a new list of HoldsVerTwoTwoList.
func NewHoldsVerTwoTwoList_List(s *capnp.Segment, sz int32) (HoldsVerTwoTwoList_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return HoldsVerTwoTwoList_List{l}, err
}

func (s HoldsVerTwoTwoList_List) At(i int) HoldsVerTwoTwoList {
	return HoldsVerTwoTwoList{s.List.Struct(i)}
}

func (s HoldsVerTwoTwoList_List) Set(i int, v HoldsVerTwoTwoList) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s HoldsVerTwoTwoList_List) String() string {
	str, _ := text.MarshalList(0x95befe3f14606e6b, s.List)
	return str
}

// HoldsVerTwoTwoList_Future is a wrapper for a HoldsVerTwoTwoList promised by a client call.
type HoldsVerTwoTwoList_Future struct{ *capnp.Future }

func (p HoldsVerTwoTwoList_Future) Struct() (HoldsVerTwoTwoList, error) {
	s, err := p.Future.Struct()
	return HoldsVerTwoTwoList{s}, err
}

type HoldsVerTwoTwoPlus struct{ capnp.Struct }

// HoldsVerTwoTwoPlus_TypeID is the unique identifier for the type HoldsVerTwoTwoPlus.
const HoldsVerTwoTwoPlus_TypeID = 0x87c33f2330feb3d8

func NewHoldsVerTwoTwoPlus(s *capnp.Segment) (HoldsVerTwoTwoPlus, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return HoldsVerTwoTwoPlus{st}, err
}

func NewRootHoldsVerTwoTwoPlus(s *capnp.Segment) (HoldsVerTwoTwoPlus, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return HoldsVerTwoTwoPlus{st}, err
}

func ReadRootHoldsVerTwoTwoPlus(msg *capnp.Message) (HoldsVerTwoTwoPlus, error) {
	root, err := msg.Root()
	return HoldsVerTwoTwoPlus{root.Struct()}, err
}

func (s HoldsVerTwoTwoPlus) String() string {
	str, _ := text.Marshal(0x87c33f2330feb3d8, s.Struct)
	return str
}

func (s HoldsVerTwoTwoPlus) Mylist() (VerTwoTwoPlus_List, error) {
	p, err := s.Struct.Ptr(0)
	return VerTwoTwoPlus_List{List: p.List()}, err
}

func (s HoldsVerTwoTwoPlus) HasMylist() bool {
	return s.Struct.HasPtr(0)
}

func (s HoldsVerTwoTwoPlus) SetMylist(v VerTwoTwoPlus_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewMylist sets the mylist field to a newly
// allocated VerTwoTwoPlus_List, preferring placement in s's segment.
func (s HoldsVerTwoTwoPlus) NewMylist(n int32) (VerTwoTwoPlus_List, error) {
	l, err := NewVerTwoTwoPlus_List(s.Struct.Segment(), n)
	if err != nil {
		return VerTwoTwoPlus_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// HoldsVerTwoTwoPlus_List is a list of HoldsVerTwoTwoPlus.
type HoldsVerTwoTwoPlus_List struct{ capnp.List }

// NewHoldsVerTwoTwoPlus creates a new list of HoldsVerTwoTwoPlus.
func NewHoldsVerTwoTwoPlus_List(s *capnp.Segment, sz int32) (HoldsVerTwoTwoPlus_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return HoldsVerTwoTwoPlus_List{l}, err
}

func (s HoldsVerTwoTwoPlus_List) At(i int) HoldsVerTwoTwoPlus {
	return HoldsVerTwoTwoPlus{s.List.Struct(i)}
}

func (s HoldsVerTwoTwoPlus_List) Set(i int, v HoldsVerTwoTwoPlus) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s HoldsVerTwoTwoPlus_List) String() string {
	str, _ := text.MarshalList(0x87c33f2330feb3d8, s.List)
	return str
}

// HoldsVerTwoTwoPlus_Future is a wrapper for a HoldsVerTwoTwoPlus promised by a client call.
type HoldsVerTwoTwoPlus_Future struct{ *capnp.Future }

func (p HoldsVerTwoTwoPlus_Future) Struct() (HoldsVerTwoTwoPlus, error) {
	s, err := p.Future.Struct()
	return HoldsVerTwoTwoPlus{s}, err
}

type VerTwoTwoPlus struct{ capnp.Struct }

// VerTwoTwoPlus_TypeID is the unique identifier for the type VerTwoTwoPlus.
const VerTwoTwoPlus_TypeID = 0xce44aee2d9e25049

func NewVerTwoTwoPlus(s *capnp.Segment) (VerTwoTwoPlus, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 3})
	return VerTwoTwoPlus{st}, err
}

func NewRootVerTwoTwoPlus(s *capnp.Segment) (VerTwoTwoPlus, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 3})
	return VerTwoTwoPlus{st}, err
}

func ReadRootVerTwoTwoPlus(msg *capnp.Message) (VerTwoTwoPlus, error) {
	root, err := msg.Root()
	return VerTwoTwoPlus{root.Struct()}, err
}

func (s VerTwoTwoPlus) String() string {
	str, _ := text.Marshal(0xce44aee2d9e25049, s.Struct)
	return str
}

func (s VerTwoTwoPlus) Val() int16 {
	return int16(s.Struct.Uint16(0))
}

func (s VerTwoTwoPlus) SetVal(v int16) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s VerTwoTwoPlus) Duo() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s VerTwoTwoPlus) SetDuo(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

func (s VerTwoTwoPlus) Ptr1() (VerTwoDataTwoPtr, error) {
	p, err := s.Struct.Ptr(0)
	return VerTwoDataTwoPtr{Struct: p.Struct()}, err
}

func (s VerTwoTwoPlus) HasPtr1() bool {
	return s.Struct.HasPtr(0)
}

func (s VerTwoTwoPlus) SetPtr1(v VerTwoDataTwoPtr) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPtr1 sets the ptr1 field to a newly
// allocated VerTwoDataTwoPtr struct, preferring placement in s's segment.
func (s VerTwoTwoPlus) NewPtr1() (VerTwoDataTwoPtr, error) {
	ss, err := NewVerTwoDataTwoPtr(s.Struct.Segment())
	if err != nil {
		return VerTwoDataTwoPtr{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s VerTwoTwoPlus) Ptr2() (VerTwoDataTwoPtr, error) {
	p, err := s.Struct.Ptr(1)
	return VerTwoDataTwoPtr{Struct: p.Struct()}, err
}

func (s VerTwoTwoPlus) HasPtr2() bool {
	return s.Struct.HasPtr(1)
}

func (s VerTwoTwoPlus) SetPtr2(v VerTwoDataTwoPtr) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewPtr2 sets the ptr2 field to a newly
// allocated VerTwoDataTwoPtr struct, preferring placement in s's segment.
func (s VerTwoTwoPlus) NewPtr2() (VerTwoDataTwoPtr, error) {
	ss, err := NewVerTwoDataTwoPtr(s.Struct.Segment())
	if err != nil {
		return VerTwoDataTwoPtr{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s VerTwoTwoPlus) Tre() int64 {
	return int64(s.Struct.Uint64(16))
}

func (s VerTwoTwoPlus) SetTre(v int64) {
	s.Struct.SetUint64(16, uint64(v))
}

func (s VerTwoTwoPlus) Lst3() (capnp.Int64List, error) {
	p, err := s.Struct.Ptr(2)
	return capnp.Int64List{List: p.List()}, err
}

func (s VerTwoTwoPlus) HasLst3() bool {
	return s.Struct.HasPtr(2)
}

func (s VerTwoTwoPlus) SetLst3(v capnp.Int64List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewLst3 sets the lst3 field to a newly
// allocated capnp.Int64List, preferring placement in s's segment.
func (s VerTwoTwoPlus) NewLst3(n int32) (capnp.Int64List, error) {
	l, err := capnp.NewInt64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Int64List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

// VerTwoTwoPlus_List is a list of VerTwoTwoPlus.
type VerTwoTwoPlus_List struct{ capnp.List }

// NewVerTwoTwoPlus creates a new list of VerTwoTwoPlus.
func NewVerTwoTwoPlus_List(s *capnp.Segment, sz int32) (VerTwoTwoPlus_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 3}, sz)
	return VerTwoTwoPlus_List{l}, err
}

func (s VerTwoTwoPlus_List) At(i int) VerTwoTwoPlus { return VerTwoTwoPlus{s.List.Struct(i)} }

func (s VerTwoTwoPlus_List) Set(i int, v VerTwoTwoPlus) error { return s.List.SetStruct(i, v.Struct) }

func (s VerTwoTwoPlus_List) String() string {
	str, _ := text.MarshalList(0xce44aee2d9e25049, s.List)
	return str
}

// VerTwoTwoPlus_Future is a wrapper for a VerTwoTwoPlus promised by a client call.
type VerTwoTwoPlus_Future struct{ *capnp.Future }

func (p VerTwoTwoPlus_Future) Struct() (VerTwoTwoPlus, error) {
	s, err := p.Future.Struct()
	return VerTwoTwoPlus{s}, err
}

func (p VerTwoTwoPlus_Future) Ptr1() VerTwoDataTwoPtr_Future {
	return VerTwoDataTwoPtr_Future{Future: p.Future.Field(0, nil)}
}

func (p VerTwoTwoPlus_Future) Ptr2() VerTwoDataTwoPtr_Future {
	return VerTwoDataTwoPtr_Future{Future: p.Future.Field(1, nil)}
}

type HoldsText struct{ capnp.Struct }

// HoldsText_TypeID is the unique identifier for the type HoldsText.
const HoldsText_TypeID = 0xe5817f849ff906dc

func NewHoldsText(s *capnp.Segment) (HoldsText, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return HoldsText{st}, err
}

func NewRootHoldsText(s *capnp.Segment) (HoldsText, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return HoldsText{st}, err
}

func ReadRootHoldsText(msg *capnp.Message) (HoldsText, error) {
	root, err := msg.Root()
	return HoldsText{root.Struct()}, err
}

func (s HoldsText) String() string {
	str, _ := text.Marshal(0xe5817f849ff906dc, s.Struct)
	return str
}

func (s HoldsText) Txt() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s HoldsText) HasTxt() bool {
	return s.Struct.HasPtr(0)
}

func (s HoldsText) TxtBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s HoldsText) SetTxt(v string) error {
	return s.Struct.SetText(0, v)
}

func (s HoldsText) Lst() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.TextList{List: p.List()}, err
}

func (s HoldsText) HasLst() bool {
	return s.Struct.HasPtr(1)
}

func (s HoldsText) SetLst(v capnp.TextList) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewLst sets the lst field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s HoldsText) NewLst(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s HoldsText) Lstlst() (capnp.PointerList, error) {
	p, err := s.Struct.Ptr(2)
	return capnp.PointerList{List: p.List()}, err
}

func (s HoldsText) HasLstlst() bool {
	return s.Struct.HasPtr(2)
}

func (s HoldsText) SetLstlst(v capnp.PointerList) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewLstlst sets the lstlst field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s HoldsText) NewLstlst(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

// HoldsText_List is a list of HoldsText.
type HoldsText_List struct{ capnp.List }

// NewHoldsText creates a new list of HoldsText.
func NewHoldsText_List(s *capnp.Segment, sz int32) (HoldsText_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return HoldsText_List{l}, err
}

func (s HoldsText_List) At(i int) HoldsText { return HoldsText{s.List.Struct(i)} }

func (s HoldsText_List) Set(i int, v HoldsText) error { return s.List.SetStruct(i, v.Struct) }

func (s HoldsText_List) String() string {
	str, _ := text.MarshalList(0xe5817f849ff906dc, s.List)
	return str
}

// HoldsText_Future is a wrapper for a HoldsText promised by a client call.
type HoldsText_Future struct{ *capnp.Future }

func (p HoldsText_Future) Struct() (HoldsText, error) {
	s, err := p.Future.Struct()
	return HoldsText{s}, err
}

type WrapEmpty struct{ capnp.Struct }

// WrapEmpty_TypeID is the unique identifier for the type WrapEmpty.
const WrapEmpty_TypeID = 0x9ab599979b02ac59

func NewWrapEmpty(s *capnp.Segment) (WrapEmpty, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WrapEmpty{st}, err
}

func NewRootWrapEmpty(s *capnp.Segment) (WrapEmpty, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WrapEmpty{st}, err
}

func ReadRootWrapEmpty(msg *capnp.Message) (WrapEmpty, error) {
	root, err := msg.Root()
	return WrapEmpty{root.Struct()}, err
}

func (s WrapEmpty) String() string {
	str, _ := text.Marshal(0x9ab599979b02ac59, s.Struct)
	return str
}

func (s WrapEmpty) MightNotBeReallyEmpty() (VerEmpty, error) {
	p, err := s.Struct.Ptr(0)
	return VerEmpty{Struct: p.Struct()}, err
}

func (s WrapEmpty) HasMightNotBeReallyEmpty() bool {
	return s.Struct.HasPtr(0)
}

func (s WrapEmpty) SetMightNotBeReallyEmpty(v VerEmpty) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewMightNotBeReallyEmpty sets the mightNotBeReallyEmpty field to a newly
// allocated VerEmpty struct, preferring placement in s's segment.
func (s WrapEmpty) NewMightNotBeReallyEmpty() (VerEmpty, error) {
	ss, err := NewVerEmpty(s.Struct.Segment())
	if err != nil {
		return VerEmpty{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// WrapEmpty_List is a list of WrapEmpty.
type WrapEmpty_List struct{ capnp.List }

// NewWrapEmpty creates a new list of WrapEmpty.
func NewWrapEmpty_List(s *capnp.Segment, sz int32) (WrapEmpty_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return WrapEmpty_List{l}, err
}

func (s WrapEmpty_List) At(i int) WrapEmpty { return WrapEmpty{s.List.Struct(i)} }

func (s WrapEmpty_List) Set(i int, v WrapEmpty) error { return s.List.SetStruct(i, v.Struct) }

func (s WrapEmpty_List) String() string {
	str, _ := text.MarshalList(0x9ab599979b02ac59, s.List)
	return str
}

// WrapEmpty_Future is a wrapper for a WrapEmpty promised by a client call.
type WrapEmpty_Future struct{ *capnp.Future }

func (p WrapEmpty_Future) Struct() (WrapEmpty, error) {
	s, err := p.Future.Struct()
	return WrapEmpty{s}, err
}

func (p WrapEmpty_Future) MightNotBeReallyEmpty() VerEmpty_Future {
	return VerEmpty_Future{Future: p.Future.Field(0, nil)}
}

type Wrap2x2 struct{ capnp.Struct }

// Wrap2x2_TypeID is the unique identifier for the type Wrap2x2.
const Wrap2x2_TypeID = 0xe1a2d1d51107bead

func NewWrap2x2(s *capnp.Segment) (Wrap2x2, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Wrap2x2{st}, err
}

func NewRootWrap2x2(s *capnp.Segment) (Wrap2x2, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Wrap2x2{st}, err
}

func ReadRootWrap2x2(msg *capnp.Message) (Wrap2x2, error) {
	root, err := msg.Root()
	return Wrap2x2{root.Struct()}, err
}

func (s Wrap2x2) String() string {
	str, _ := text.Marshal(0xe1a2d1d51107bead, s.Struct)
	return str
}

func (s Wrap2x2) MightNotBeReallyEmpty() (VerTwoDataTwoPtr, error) {
	p, err := s.Struct.Ptr(0)
	return VerTwoDataTwoPtr{Struct: p.Struct()}, err
}

func (s Wrap2x2) HasMightNotBeReallyEmpty() bool {
	return s.Struct.HasPtr(0)
}

func (s Wrap2x2) SetMightNotBeReallyEmpty(v VerTwoDataTwoPtr) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewMightNotBeReallyEmpty sets the mightNotBeReallyEmpty field to a newly
// allocated VerTwoDataTwoPtr struct, preferring placement in s's segment.
func (s Wrap2x2) NewMightNotBeReallyEmpty() (VerTwoDataTwoPtr, error) {
	ss, err := NewVerTwoDataTwoPtr(s.Struct.Segment())
	if err != nil {
		return VerTwoDataTwoPtr{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Wrap2x2_List is a list of Wrap2x2.
type Wrap2x2_List struct{ capnp.List }

// NewWrap2x2 creates a new list of Wrap2x2.
func NewWrap2x2_List(s *capnp.Segment, sz int32) (Wrap2x2_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Wrap2x2_List{l}, err
}

func (s Wrap2x2_List) At(i int) Wrap2x2 { return Wrap2x2{s.List.Struct(i)} }

func (s Wrap2x2_List) Set(i int, v Wrap2x2) error { return s.List.SetStruct(i, v.Struct) }

func (s Wrap2x2_List) String() string {
	str, _ := text.MarshalList(0xe1a2d1d51107bead, s.List)
	return str
}

// Wrap2x2_Future is a wrapper for a Wrap2x2 promised by a client call.
type Wrap2x2_Future struct{ *capnp.Future }

func (p Wrap2x2_Future) Struct() (Wrap2x2, error) {
	s, err := p.Future.Struct()
	return Wrap2x2{s}, err
}

func (p Wrap2x2_Future) MightNotBeReallyEmpty() VerTwoDataTwoPtr_Future {
	return VerTwoDataTwoPtr_Future{Future: p.Future.Field(0, nil)}
}

type Wrap2x2plus struct{ capnp.Struct }

// Wrap2x2plus_TypeID is the unique identifier for the type Wrap2x2plus.
const Wrap2x2plus_TypeID = 0xe684eb3aef1a6859

func NewWrap2x2plus(s *capnp.Segment) (Wrap2x2plus, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Wrap2x2plus{st}, err
}

func NewRootWrap2x2plus(s *capnp.Segment) (Wrap2x2plus, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Wrap2x2plus{st}, err
}

func ReadRootWrap2x2plus(msg *capnp.Message) (Wrap2x2plus, error) {
	root, err := msg.Root()
	return Wrap2x2plus{root.Struct()}, err
}

func (s Wrap2x2plus) String() string {
	str, _ := text.Marshal(0xe684eb3aef1a6859, s.Struct)
	return str
}

func (s Wrap2x2plus) MightNotBeReallyEmpty() (VerTwoTwoPlus, error) {
	p, err := s.Struct.Ptr(0)
	return VerTwoTwoPlus{Struct: p.Struct()}, err
}

func (s Wrap2x2plus) HasMightNotBeReallyEmpty() bool {
	return s.Struct.HasPtr(0)
}

func (s Wrap2x2plus) SetMightNotBeReallyEmpty(v VerTwoTwoPlus) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewMightNotBeReallyEmpty sets the mightNotBeReallyEmpty field to a newly
// allocated VerTwoTwoPlus struct, preferring placement in s's segment.
func (s Wrap2x2plus) NewMightNotBeReallyEmpty() (VerTwoTwoPlus, error) {
	ss, err := NewVerTwoTwoPlus(s.Struct.Segment())
	if err != nil {
		return VerTwoTwoPlus{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Wrap2x2plus_List is a list of Wrap2x2plus.
type Wrap2x2plus_List struct{ capnp.List }

// NewWrap2x2plus creates a new list of Wrap2x2plus.
func NewWrap2x2plus_List(s *capnp.Segment, sz int32) (Wrap2x2plus_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Wrap2x2plus_List{l}, err
}

func (s Wrap2x2plus_List) At(i int) Wrap2x2plus { return Wrap2x2plus{s.List.Struct(i)} }

func (s Wrap2x2plus_List) Set(i int, v Wrap2x2plus) error { return s.List.SetStruct(i, v.Struct) }

func (s Wrap2x2plus_List) String() string {
	str, _ := text.MarshalList(0xe684eb3aef1a6859, s.List)
	return str
}

// Wrap2x2plus_Future is a wrapper for a Wrap2x2plus promised by a client call.
type Wrap2x2plus_Future struct{ *capnp.Future }

func (p Wrap2x2plus_Future) Struct() (Wrap2x2plus, error) {
	s, err := p.Future.Struct()
	return Wrap2x2plus{s}, err
}

func (p Wrap2x2plus_Future) MightNotBeReallyEmpty() VerTwoTwoPlus_Future {
	return VerTwoTwoPlus_Future{Future: p.Future.Field(0, nil)}
}

type VoidUnion struct{ capnp.Struct }
type VoidUnion_Which uint16

const (
	VoidUnion_Which_a VoidUnion_Which = 0
	VoidUnion_Which_b VoidUnion_Which = 1
)

func (w VoidUnion_Which) String() string {
	const s = "ab"
	switch w {
	case VoidUnion_Which_a:
		return s[0:1]
	case VoidUnion_Which_b:
		return s[1:2]

	}
	return "VoidUnion_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// VoidUnion_TypeID is the unique identifier for the type VoidUnion.
const VoidUnion_TypeID = 0x8821cdb23640783a

func NewVoidUnion(s *capnp.Segment) (VoidUnion, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return VoidUnion{st}, err
}

func NewRootVoidUnion(s *capnp.Segment) (VoidUnion, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return VoidUnion{st}, err
}

func ReadRootVoidUnion(msg *capnp.Message) (VoidUnion, error) {
	root, err := msg.Root()
	return VoidUnion{root.Struct()}, err
}

func (s VoidUnion) String() string {
	str, _ := text.Marshal(0x8821cdb23640783a, s.Struct)
	return str
}

func (s VoidUnion) Which() VoidUnion_Which {
	return VoidUnion_Which(s.Struct.Uint16(0))
}
func (s VoidUnion) SetA() {
	s.Struct.SetUint16(0, 0)

}

func (s VoidUnion) SetB() {
	s.Struct.SetUint16(0, 1)

}

// VoidUnion_List is a list of VoidUnion.
type VoidUnion_List struct{ capnp.List }

// NewVoidUnion creates a new list of VoidUnion.
func NewVoidUnion_List(s *capnp.Segment, sz int32) (VoidUnion_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return VoidUnion_List{l}, err
}

func (s VoidUnion_List) At(i int) VoidUnion { return VoidUnion{s.List.Struct(i)} }

func (s VoidUnion_List) Set(i int, v VoidUnion) error { return s.List.SetStruct(i, v.Struct) }

func (s VoidUnion_List) String() string {
	str, _ := text.MarshalList(0x8821cdb23640783a, s.List)
	return str
}

// VoidUnion_Future is a wrapper for a VoidUnion promised by a client call.
type VoidUnion_Future struct{ *capnp.Future }

func (p VoidUnion_Future) Struct() (VoidUnion, error) {
	s, err := p.Future.Struct()
	return VoidUnion{s}, err
}

type Nester1Capn struct{ capnp.Struct }

// Nester1Capn_TypeID is the unique identifier for the type Nester1Capn.
const Nester1Capn_TypeID = 0xf14fad09425d081c

func NewNester1Capn(s *capnp.Segment) (Nester1Capn, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Nester1Capn{st}, err
}

func NewRootNester1Capn(s *capnp.Segment) (Nester1Capn, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Nester1Capn{st}, err
}

func ReadRootNester1Capn(msg *capnp.Message) (Nester1Capn, error) {
	root, err := msg.Root()
	return Nester1Capn{root.Struct()}, err
}

func (s Nester1Capn) String() string {
	str, _ := text.Marshal(0xf14fad09425d081c, s.Struct)
	return str
}

func (s Nester1Capn) Strs() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.TextList{List: p.List()}, err
}

func (s Nester1Capn) HasStrs() bool {
	return s.Struct.HasPtr(0)
}

func (s Nester1Capn) SetStrs(v capnp.TextList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewStrs sets the strs field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Nester1Capn) NewStrs(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Nester1Capn_List is a list of Nester1Capn.
type Nester1Capn_List struct{ capnp.List }

// NewNester1Capn creates a new list of Nester1Capn.
func NewNester1Capn_List(s *capnp.Segment, sz int32) (Nester1Capn_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Nester1Capn_List{l}, err
}

func (s Nester1Capn_List) At(i int) Nester1Capn { return Nester1Capn{s.List.Struct(i)} }

func (s Nester1Capn_List) Set(i int, v Nester1Capn) error { return s.List.SetStruct(i, v.Struct) }

func (s Nester1Capn_List) String() string {
	str, _ := text.MarshalList(0xf14fad09425d081c, s.List)
	return str
}

// Nester1Capn_Future is a wrapper for a Nester1Capn promised by a client call.
type Nester1Capn_Future struct{ *capnp.Future }

func (p Nester1Capn_Future) Struct() (Nester1Capn, error) {
	s, err := p.Future.Struct()
	return Nester1Capn{s}, err
}

type RWTestCapn struct{ capnp.Struct }

// RWTestCapn_TypeID is the unique identifier for the type RWTestCapn.
const RWTestCapn_TypeID = 0xf7ff4414476c186a

func NewRWTestCapn(s *capnp.Segment) (RWTestCapn, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RWTestCapn{st}, err
}

func NewRootRWTestCapn(s *capnp.Segment) (RWTestCapn, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RWTestCapn{st}, err
}

func ReadRootRWTestCapn(msg *capnp.Message) (RWTestCapn, error) {
	root, err := msg.Root()
	return RWTestCapn{root.Struct()}, err
}

func (s RWTestCapn) String() string {
	str, _ := text.Marshal(0xf7ff4414476c186a, s.Struct)
	return str
}

func (s RWTestCapn) NestMatrix() (capnp.PointerList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.PointerList{List: p.List()}, err
}

func (s RWTestCapn) HasNestMatrix() bool {
	return s.Struct.HasPtr(0)
}

func (s RWTestCapn) SetNestMatrix(v capnp.PointerList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewNestMatrix sets the nestMatrix field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s RWTestCapn) NewNestMatrix(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// RWTestCapn_List is a list of RWTestCapn.
type RWTestCapn_List struct{ capnp.List }

// NewRWTestCapn creates a new list of RWTestCapn.
func NewRWTestCapn_List(s *capnp.Segment, sz int32) (RWTestCapn_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return RWTestCapn_List{l}, err
}

func (s RWTestCapn_List) At(i int) RWTestCapn { return RWTestCapn{s.List.Struct(i)} }

func (s RWTestCapn_List) Set(i int, v RWTestCapn) error { return s.List.SetStruct(i, v.Struct) }

func (s RWTestCapn_List) String() string {
	str, _ := text.MarshalList(0xf7ff4414476c186a, s.List)
	return str
}

// RWTestCapn_Future is a wrapper for a RWTestCapn promised by a client call.
type RWTestCapn_Future struct{ *capnp.Future }

func (p RWTestCapn_Future) Struct() (RWTestCapn, error) {
	s, err := p.Future.Struct()
	return RWTestCapn{s}, err
}

type ListStructCapn struct{ capnp.Struct }

// ListStructCapn_TypeID is the unique identifier for the type ListStructCapn.
const ListStructCapn_TypeID = 0xb1ac056ed7647011

func NewListStructCapn(s *capnp.Segment) (ListStructCapn, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ListStructCapn{st}, err
}

func NewRootListStructCapn(s *capnp.Segment) (ListStructCapn, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ListStructCapn{st}, err
}

func ReadRootListStructCapn(msg *capnp.Message) (ListStructCapn, error) {
	root, err := msg.Root()
	return ListStructCapn{root.Struct()}, err
}

func (s ListStructCapn) String() string {
	str, _ := text.Marshal(0xb1ac056ed7647011, s.Struct)
	return str
}

func (s ListStructCapn) Vec() (Nester1Capn_List, error) {
	p, err := s.Struct.Ptr(0)
	return Nester1Capn_List{List: p.List()}, err
}

func (s ListStructCapn) HasVec() bool {
	return s.Struct.HasPtr(0)
}

func (s ListStructCapn) SetVec(v Nester1Capn_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewVec sets the vec field to a newly
// allocated Nester1Capn_List, preferring placement in s's segment.
func (s ListStructCapn) NewVec(n int32) (Nester1Capn_List, error) {
	l, err := NewNester1Capn_List(s.Struct.Segment(), n)
	if err != nil {
		return Nester1Capn_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// ListStructCapn_List is a list of ListStructCapn.
type ListStructCapn_List struct{ capnp.List }

// NewListStructCapn creates a new list of ListStructCapn.
func NewListStructCapn_List(s *capnp.Segment, sz int32) (ListStructCapn_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ListStructCapn_List{l}, err
}

func (s ListStructCapn_List) At(i int) ListStructCapn { return ListStructCapn{s.List.Struct(i)} }

func (s ListStructCapn_List) Set(i int, v ListStructCapn) error { return s.List.SetStruct(i, v.Struct) }

func (s ListStructCapn_List) String() string {
	str, _ := text.MarshalList(0xb1ac056ed7647011, s.List)
	return str
}

// ListStructCapn_Future is a wrapper for a ListStructCapn promised by a client call.
type ListStructCapn_Future struct{ *capnp.Future }

func (p ListStructCapn_Future) Struct() (ListStructCapn, error) {
	s, err := p.Future.Struct()
	return ListStructCapn{s}, err
}

type Echo struct{ Client *capnp.Client }

// Echo_TypeID is the unique identifier for the type Echo.
const Echo_TypeID = 0x8e5322c1e9282534

func (c Echo) Echo(ctx context.Context, params func(Echo_echo_Params) error, opts ...capnp.CallOption) (Echo_echo_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8e5322c1e9282534,
			MethodID:      0,
			InterfaceName: "aircraft.capnp:Echo",
			MethodName:    "echo",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Echo_echo_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Echo_echo_Results_Future{Future: ans.Future()}, release
}

// A Echo_Server is a Echo with a local implementation.
type Echo_Server interface {
	Echo(context.Context, Echo_echo) error
}

// Echo_NewServer creates a new Server from an implementation of Echo_Server.
func Echo_NewServer(s Echo_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Closer)
	return server.New(Echo_Methods(nil, s), s, c, policy)
}

// Echo_ServerToClient creates a new Client from an implementation of Echo_Server.
// The caller is responsible for calling Close on the returned Client.
func Echo_ServerToClient(s Echo_Server, policy *server.Policy) Echo {
	return Echo{Client: capnp.NewClient(Echo_NewServer(s, policy))}
}

// Echo_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Echo_Methods(methods []server.Method, s Echo_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8e5322c1e9282534,
			MethodID:      0,
			InterfaceName: "aircraft.capnp:Echo",
			MethodName:    "echo",
		},
		Impl: func(ctx context.Context, call server.Call) error {
			return s.Echo(ctx, Echo_echo{
				Args:    Echo_echo_Params{Struct: call.Args},
				Results: Echo_echo_Results{Struct: call.Results},
				Ack:     call.Ack,
			})
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	return methods
}

// Echo_echo holds the state for a server call to Echo.echo.
// See server.Call for documentation.
type Echo_echo struct {
	Args    Echo_echo_Params
	Results Echo_echo_Results
	Ack     func()
}

type Echo_echo_Params struct{ capnp.Struct }

// Echo_echo_Params_TypeID is the unique identifier for the type Echo_echo_Params.
const Echo_echo_Params_TypeID = 0x8a165fb4d71bf3a2

func NewEcho_echo_Params(s *capnp.Segment) (Echo_echo_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Echo_echo_Params{st}, err
}

func NewRootEcho_echo_Params(s *capnp.Segment) (Echo_echo_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Echo_echo_Params{st}, err
}

func ReadRootEcho_echo_Params(msg *capnp.Message) (Echo_echo_Params, error) {
	root, err := msg.Root()
	return Echo_echo_Params{root.Struct()}, err
}

func (s Echo_echo_Params) String() string {
	str, _ := text.Marshal(0x8a165fb4d71bf3a2, s.Struct)
	return str
}

func (s Echo_echo_Params) In() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Echo_echo_Params) HasIn() bool {
	return s.Struct.HasPtr(0)
}

func (s Echo_echo_Params) InBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Echo_echo_Params) SetIn(v string) error {
	return s.Struct.SetText(0, v)
}

// Echo_echo_Params_List is a list of Echo_echo_Params.
type Echo_echo_Params_List struct{ capnp.List }

// NewEcho_echo_Params creates a new list of Echo_echo_Params.
func NewEcho_echo_Params_List(s *capnp.Segment, sz int32) (Echo_echo_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Echo_echo_Params_List{l}, err
}

func (s Echo_echo_Params_List) At(i int) Echo_echo_Params { return Echo_echo_Params{s.List.Struct(i)} }

func (s Echo_echo_Params_List) Set(i int, v Echo_echo_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Echo_echo_Params_List) String() string {
	str, _ := text.MarshalList(0x8a165fb4d71bf3a2, s.List)
	return str
}

// Echo_echo_Params_Future is a wrapper for a Echo_echo_Params promised by a client call.
type Echo_echo_Params_Future struct{ *capnp.Future }

func (p Echo_echo_Params_Future) Struct() (Echo_echo_Params, error) {
	s, err := p.Future.Struct()
	return Echo_echo_Params{s}, err
}

type Echo_echo_Results struct{ capnp.Struct }

// Echo_echo_Results_TypeID is the unique identifier for the type Echo_echo_Results.
const Echo_echo_Results_TypeID = 0x9b37d729b9dd7b9d

func NewEcho_echo_Results(s *capnp.Segment) (Echo_echo_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Echo_echo_Results{st}, err
}

func NewRootEcho_echo_Results(s *capnp.Segment) (Echo_echo_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Echo_echo_Results{st}, err
}

func ReadRootEcho_echo_Results(msg *capnp.Message) (Echo_echo_Results, error) {
	root, err := msg.Root()
	return Echo_echo_Results{root.Struct()}, err
}

func (s Echo_echo_Results) String() string {
	str, _ := text.Marshal(0x9b37d729b9dd7b9d, s.Struct)
	return str
}

func (s Echo_echo_Results) Out() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Echo_echo_Results) HasOut() bool {
	return s.Struct.HasPtr(0)
}

func (s Echo_echo_Results) OutBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Echo_echo_Results) SetOut(v string) error {
	return s.Struct.SetText(0, v)
}

// Echo_echo_Results_List is a list of Echo_echo_Results.
type Echo_echo_Results_List struct{ capnp.List }

// NewEcho_echo_Results creates a new list of Echo_echo_Results.
func NewEcho_echo_Results_List(s *capnp.Segment, sz int32) (Echo_echo_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Echo_echo_Results_List{l}, err
}

func (s Echo_echo_Results_List) At(i int) Echo_echo_Results {
	return Echo_echo_Results{s.List.Struct(i)}
}

func (s Echo_echo_Results_List) Set(i int, v Echo_echo_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Echo_echo_Results_List) String() string {
	str, _ := text.MarshalList(0x9b37d729b9dd7b9d, s.List)
	return str
}

// Echo_echo_Results_Future is a wrapper for a Echo_echo_Results promised by a client call.
type Echo_echo_Results_Future struct{ *capnp.Future }

func (p Echo_echo_Results_Future) Struct() (Echo_echo_Results, error) {
	s, err := p.Future.Struct()
	return Echo_echo_Results{s}, err
}

type Hoth struct{ capnp.Struct }

// Hoth_TypeID is the unique identifier for the type Hoth.
const Hoth_TypeID = 0xad87da456fb0ebb9

func NewHoth(s *capnp.Segment) (Hoth, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Hoth{st}, err
}

func NewRootHoth(s *capnp.Segment) (Hoth, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Hoth{st}, err
}

func ReadRootHoth(msg *capnp.Message) (Hoth, error) {
	root, err := msg.Root()
	return Hoth{root.Struct()}, err
}

func (s Hoth) String() string {
	str, _ := text.Marshal(0xad87da456fb0ebb9, s.Struct)
	return str
}

func (s Hoth) Base() (EchoBase, error) {
	p, err := s.Struct.Ptr(0)
	return EchoBase{Struct: p.Struct()}, err
}

func (s Hoth) HasBase() bool {
	return s.Struct.HasPtr(0)
}

func (s Hoth) SetBase(v EchoBase) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewBase sets the base field to a newly
// allocated EchoBase struct, preferring placement in s's segment.
func (s Hoth) NewBase() (EchoBase, error) {
	ss, err := NewEchoBase(s.Struct.Segment())
	if err != nil {
		return EchoBase{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Hoth_List is a list of Hoth.
type Hoth_List struct{ capnp.List }

// NewHoth creates a new list of Hoth.
func NewHoth_List(s *capnp.Segment, sz int32) (Hoth_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Hoth_List{l}, err
}

func (s Hoth_List) At(i int) Hoth { return Hoth{s.List.Struct(i)} }

func (s Hoth_List) Set(i int, v Hoth) error { return s.List.SetStruct(i, v.Struct) }

func (s Hoth_List) String() string {
	str, _ := text.MarshalList(0xad87da456fb0ebb9, s.List)
	return str
}

// Hoth_Future is a wrapper for a Hoth promised by a client call.
type Hoth_Future struct{ *capnp.Future }

func (p Hoth_Future) Struct() (Hoth, error) {
	s, err := p.Future.Struct()
	return Hoth{s}, err
}

func (p Hoth_Future) Base() EchoBase_Future {
	return EchoBase_Future{Future: p.Future.Field(0, nil)}
}

type EchoBase struct{ capnp.Struct }

// EchoBase_TypeID is the unique identifier for the type EchoBase.
const EchoBase_TypeID = 0xa8bf13fef2674866

func NewEchoBase(s *capnp.Segment) (EchoBase, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EchoBase{st}, err
}

func NewRootEchoBase(s *capnp.Segment) (EchoBase, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EchoBase{st}, err
}

func ReadRootEchoBase(msg *capnp.Message) (EchoBase, error) {
	root, err := msg.Root()
	return EchoBase{root.Struct()}, err
}

func (s EchoBase) String() string {
	str, _ := text.Marshal(0xa8bf13fef2674866, s.Struct)
	return str
}

func (s EchoBase) Echo() Echo {
	p, _ := s.Struct.Ptr(0)
	return Echo{Client: p.Interface().Client()}
}

func (s EchoBase) HasEcho() bool {
	return s.Struct.HasPtr(0)
}

func (s EchoBase) SetEcho(v Echo) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// EchoBase_List is a list of EchoBase.
type EchoBase_List struct{ capnp.List }

// NewEchoBase creates a new list of EchoBase.
func NewEchoBase_List(s *capnp.Segment, sz int32) (EchoBase_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return EchoBase_List{l}, err
}

func (s EchoBase_List) At(i int) EchoBase { return EchoBase{s.List.Struct(i)} }

func (s EchoBase_List) Set(i int, v EchoBase) error { return s.List.SetStruct(i, v.Struct) }

func (s EchoBase_List) String() string {
	str, _ := text.MarshalList(0xa8bf13fef2674866, s.List)
	return str
}

// EchoBase_Future is a wrapper for a EchoBase promised by a client call.
type EchoBase_Future struct{ *capnp.Future }

func (p EchoBase_Future) Struct() (EchoBase, error) {
	s, err := p.Future.Struct()
	return EchoBase{s}, err
}

func (p EchoBase_Future) Echo() Echo {
	return Echo{Client: p.Future.Field(0, nil).Client()}
}

type StackingRoot struct{ capnp.Struct }

// StackingRoot_TypeID is the unique identifier for the type StackingRoot.
const StackingRoot_TypeID = 0x8fae7b41c61fc890

func NewStackingRoot(s *capnp.Segment) (StackingRoot, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return StackingRoot{st}, err
}

func NewRootStackingRoot(s *capnp.Segment) (StackingRoot, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return StackingRoot{st}, err
}

func ReadRootStackingRoot(msg *capnp.Message) (StackingRoot, error) {
	root, err := msg.Root()
	return StackingRoot{root.Struct()}, err
}

func (s StackingRoot) String() string {
	str, _ := text.Marshal(0x8fae7b41c61fc890, s.Struct)
	return str
}

func (s StackingRoot) A() (StackingA, error) {
	p, err := s.Struct.Ptr(1)
	return StackingA{Struct: p.Struct()}, err
}

func (s StackingRoot) HasA() bool {
	return s.Struct.HasPtr(1)
}

func (s StackingRoot) SetA(v StackingA) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewA sets the a field to a newly
// allocated StackingA struct, preferring placement in s's segment.
func (s StackingRoot) NewA() (StackingA, error) {
	ss, err := NewStackingA(s.Struct.Segment())
	if err != nil {
		return StackingA{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s StackingRoot) AWithDefault() (StackingA, error) {
	p, err := s.Struct.Ptr(0)
	if err != nil {
		return StackingA{}, err
	}
	ss, err := p.StructDefault(x_832bcc6686a26d56[64:96])
	return StackingA{Struct: ss}, err
}

func (s StackingRoot) HasAWithDefault() bool {
	return s.Struct.HasPtr(0)
}

func (s StackingRoot) SetAWithDefault(v StackingA) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAWithDefault sets the aWithDefault field to a newly
// allocated StackingA struct, preferring placement in s's segment.
func (s StackingRoot) NewAWithDefault() (StackingA, error) {
	ss, err := NewStackingA(s.Struct.Segment())
	if err != nil {
		return StackingA{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// StackingRoot_List is a list of StackingRoot.
type StackingRoot_List struct{ capnp.List }

// NewStackingRoot creates a new list of StackingRoot.
func NewStackingRoot_List(s *capnp.Segment, sz int32) (StackingRoot_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return StackingRoot_List{l}, err
}

func (s StackingRoot_List) At(i int) StackingRoot { return StackingRoot{s.List.Struct(i)} }

func (s StackingRoot_List) Set(i int, v StackingRoot) error { return s.List.SetStruct(i, v.Struct) }

func (s StackingRoot_List) String() string {
	str, _ := text.MarshalList(0x8fae7b41c61fc890, s.List)
	return str
}

// StackingRoot_Future is a wrapper for a StackingRoot promised by a client call.
type StackingRoot_Future struct{ *capnp.Future }

func (p StackingRoot_Future) Struct() (StackingRoot, error) {
	s, err := p.Future.Struct()
	return StackingRoot{s}, err
}

func (p StackingRoot_Future) A() StackingA_Future {
	return StackingA_Future{Future: p.Future.Field(1, nil)}
}

func (p StackingRoot_Future) AWithDefault() StackingA_Future {
	return StackingA_Future{Future: p.Future.Field(0, x_832bcc6686a26d56[96:128])}
}

type StackingA struct{ capnp.Struct }

// StackingA_TypeID is the unique identifier for the type StackingA.
const StackingA_TypeID = 0x9d3032ff86043b75

func NewStackingA(s *capnp.Segment) (StackingA, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return StackingA{st}, err
}

func NewRootStackingA(s *capnp.Segment) (StackingA, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return StackingA{st}, err
}

func ReadRootStackingA(msg *capnp.Message) (StackingA, error) {
	root, err := msg.Root()
	return StackingA{root.Struct()}, err
}

func (s StackingA) String() string {
	str, _ := text.Marshal(0x9d3032ff86043b75, s.Struct)
	return str
}

func (s StackingA) Num() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s StackingA) SetNum(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

func (s StackingA) B() (StackingB, error) {
	p, err := s.Struct.Ptr(0)
	return StackingB{Struct: p.Struct()}, err
}

func (s StackingA) HasB() bool {
	return s.Struct.HasPtr(0)
}

func (s StackingA) SetB(v StackingB) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewB sets the b field to a newly
// allocated StackingB struct, preferring placement in s's segment.
func (s StackingA) NewB() (StackingB, error) {
	ss, err := NewStackingB(s.Struct.Segment())
	if err != nil {
		return StackingB{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// StackingA_List is a list of StackingA.
type StackingA_List struct{ capnp.List }

// NewStackingA creates a new list of StackingA.
func NewStackingA_List(s *capnp.Segment, sz int32) (StackingA_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return StackingA_List{l}, err
}

func (s StackingA_List) At(i int) StackingA { return StackingA{s.List.Struct(i)} }

func (s StackingA_List) Set(i int, v StackingA) error { return s.List.SetStruct(i, v.Struct) }

func (s StackingA_List) String() string {
	str, _ := text.MarshalList(0x9d3032ff86043b75, s.List)
	return str
}

// StackingA_Future is a wrapper for a StackingA promised by a client call.
type StackingA_Future struct{ *capnp.Future }

func (p StackingA_Future) Struct() (StackingA, error) {
	s, err := p.Future.Struct()
	return StackingA{s}, err
}

func (p StackingA_Future) B() StackingB_Future {
	return StackingB_Future{Future: p.Future.Field(0, nil)}
}

type StackingB struct{ capnp.Struct }

// StackingB_TypeID is the unique identifier for the type StackingB.
const StackingB_TypeID = 0x85257b30d6edf8c5

func NewStackingB(s *capnp.Segment) (StackingB, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return StackingB{st}, err
}

func NewRootStackingB(s *capnp.Segment) (StackingB, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return StackingB{st}, err
}

func ReadRootStackingB(msg *capnp.Message) (StackingB, error) {
	root, err := msg.Root()
	return StackingB{root.Struct()}, err
}

func (s StackingB) String() string {
	str, _ := text.Marshal(0x85257b30d6edf8c5, s.Struct)
	return str
}

func (s StackingB) Num() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s StackingB) SetNum(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

// StackingB_List is a list of StackingB.
type StackingB_List struct{ capnp.List }

// NewStackingB creates a new list of StackingB.
func NewStackingB_List(s *capnp.Segment, sz int32) (StackingB_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return StackingB_List{l}, err
}

func (s StackingB_List) At(i int) StackingB { return StackingB{s.List.Struct(i)} }

func (s StackingB_List) Set(i int, v StackingB) error { return s.List.SetStruct(i, v.Struct) }

func (s StackingB_List) String() string {
	str, _ := text.MarshalList(0x85257b30d6edf8c5, s.List)
	return str
}

// StackingB_Future is a wrapper for a StackingB promised by a client call.
type StackingB_Future struct{ *capnp.Future }

func (p StackingB_Future) Struct() (StackingB, error) {
	s, err := p.Future.Struct()
	return StackingB{s}, err
}

type CallSequence struct{ Client *capnp.Client }

// CallSequence_TypeID is the unique identifier for the type CallSequence.
const CallSequence_TypeID = 0xabaedf5f7817c820

func (c CallSequence) GetNumber(ctx context.Context, params func(CallSequence_getNumber_Params) error, opts ...capnp.CallOption) (CallSequence_getNumber_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xabaedf5f7817c820,
			MethodID:      0,
			InterfaceName: "aircraft.capnp:CallSequence",
			MethodName:    "getNumber",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CallSequence_getNumber_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return CallSequence_getNumber_Results_Future{Future: ans.Future()}, release
}

// A CallSequence_Server is a CallSequence with a local implementation.
type CallSequence_Server interface {
	GetNumber(context.Context, CallSequence_getNumber) error
}

// CallSequence_NewServer creates a new Server from an implementation of CallSequence_Server.
func CallSequence_NewServer(s CallSequence_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Closer)
	return server.New(CallSequence_Methods(nil, s), s, c, policy)
}

// CallSequence_ServerToClient creates a new Client from an implementation of CallSequence_Server.
// The caller is responsible for calling Close on the returned Client.
func CallSequence_ServerToClient(s CallSequence_Server, policy *server.Policy) CallSequence {
	return CallSequence{Client: capnp.NewClient(CallSequence_NewServer(s, policy))}
}

// CallSequence_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func CallSequence_Methods(methods []server.Method, s CallSequence_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xabaedf5f7817c820,
			MethodID:      0,
			InterfaceName: "aircraft.capnp:CallSequence",
			MethodName:    "getNumber",
		},
		Impl: func(ctx context.Context, call server.Call) error {
			return s.GetNumber(ctx, CallSequence_getNumber{
				Args:    CallSequence_getNumber_Params{Struct: call.Args},
				Results: CallSequence_getNumber_Results{Struct: call.Results},
				Ack:     call.Ack,
			})
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	return methods
}

// CallSequence_getNumber holds the state for a server call to CallSequence.getNumber.
// See server.Call for documentation.
type CallSequence_getNumber struct {
	Args    CallSequence_getNumber_Params
	Results CallSequence_getNumber_Results
	Ack     func()
}

type CallSequence_getNumber_Params struct{ capnp.Struct }

// CallSequence_getNumber_Params_TypeID is the unique identifier for the type CallSequence_getNumber_Params.
const CallSequence_getNumber_Params_TypeID = 0xf58782f48a121998

func NewCallSequence_getNumber_Params(s *capnp.Segment) (CallSequence_getNumber_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CallSequence_getNumber_Params{st}, err
}

func NewRootCallSequence_getNumber_Params(s *capnp.Segment) (CallSequence_getNumber_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CallSequence_getNumber_Params{st}, err
}

func ReadRootCallSequence_getNumber_Params(msg *capnp.Message) (CallSequence_getNumber_Params, error) {
	root, err := msg.Root()
	return CallSequence_getNumber_Params{root.Struct()}, err
}

func (s CallSequence_getNumber_Params) String() string {
	str, _ := text.Marshal(0xf58782f48a121998, s.Struct)
	return str
}

// CallSequence_getNumber_Params_List is a list of CallSequence_getNumber_Params.
type CallSequence_getNumber_Params_List struct{ capnp.List }

// NewCallSequence_getNumber_Params creates a new list of CallSequence_getNumber_Params.
func NewCallSequence_getNumber_Params_List(s *capnp.Segment, sz int32) (CallSequence_getNumber_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return CallSequence_getNumber_Params_List{l}, err
}

func (s CallSequence_getNumber_Params_List) At(i int) CallSequence_getNumber_Params {
	return CallSequence_getNumber_Params{s.List.Struct(i)}
}

func (s CallSequence_getNumber_Params_List) Set(i int, v CallSequence_getNumber_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s CallSequence_getNumber_Params_List) String() string {
	str, _ := text.MarshalList(0xf58782f48a121998, s.List)
	return str
}

// CallSequence_getNumber_Params_Future is a wrapper for a CallSequence_getNumber_Params promised by a client call.
type CallSequence_getNumber_Params_Future struct{ *capnp.Future }

func (p CallSequence_getNumber_Params_Future) Struct() (CallSequence_getNumber_Params, error) {
	s, err := p.Future.Struct()
	return CallSequence_getNumber_Params{s}, err
}

type CallSequence_getNumber_Results struct{ capnp.Struct }

// CallSequence_getNumber_Results_TypeID is the unique identifier for the type CallSequence_getNumber_Results.
const CallSequence_getNumber_Results_TypeID = 0xa465f9502fd11e97

func NewCallSequence_getNumber_Results(s *capnp.Segment) (CallSequence_getNumber_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return CallSequence_getNumber_Results{st}, err
}

func NewRootCallSequence_getNumber_Results(s *capnp.Segment) (CallSequence_getNumber_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return CallSequence_getNumber_Results{st}, err
}

func ReadRootCallSequence_getNumber_Results(msg *capnp.Message) (CallSequence_getNumber_Results, error) {
	root, err := msg.Root()
	return CallSequence_getNumber_Results{root.Struct()}, err
}

func (s CallSequence_getNumber_Results) String() string {
	str, _ := text.Marshal(0xa465f9502fd11e97, s.Struct)
	return str
}

func (s CallSequence_getNumber_Results) N() uint32 {
	return s.Struct.Uint32(0)
}

func (s CallSequence_getNumber_Results) SetN(v uint32) {
	s.Struct.SetUint32(0, v)
}

// CallSequence_getNumber_Results_List is a list of CallSequence_getNumber_Results.
type CallSequence_getNumber_Results_List struct{ capnp.List }

// NewCallSequence_getNumber_Results creates a new list of CallSequence_getNumber_Results.
func NewCallSequence_getNumber_Results_List(s *capnp.Segment, sz int32) (CallSequence_getNumber_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return CallSequence_getNumber_Results_List{l}, err
}

func (s CallSequence_getNumber_Results_List) At(i int) CallSequence_getNumber_Results {
	return CallSequence_getNumber_Results{s.List.Struct(i)}
}

func (s CallSequence_getNumber_Results_List) Set(i int, v CallSequence_getNumber_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s CallSequence_getNumber_Results_List) String() string {
	str, _ := text.MarshalList(0xa465f9502fd11e97, s.List)
	return str
}

// CallSequence_getNumber_Results_Future is a wrapper for a CallSequence_getNumber_Results promised by a client call.
type CallSequence_getNumber_Results_Future struct{ *capnp.Future }

func (p CallSequence_getNumber_Results_Future) Struct() (CallSequence_getNumber_Results, error) {
	s, err := p.Future.Struct()
	return CallSequence_getNumber_Results{s}, err
}

type Pipeliner struct{ Client *capnp.Client }

// Pipeliner_TypeID is the unique identifier for the type Pipeliner.
const Pipeliner_TypeID = 0xd6514008f0f84ebc

func (c Pipeliner) NewPipeliner(ctx context.Context, params func(Pipeliner_newPipeliner_Params) error, opts ...capnp.CallOption) (Pipeliner_newPipeliner_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd6514008f0f84ebc,
			MethodID:      0,
			InterfaceName: "aircraft.capnp:Pipeliner",
			MethodName:    "newPipeliner",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Pipeliner_newPipeliner_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Pipeliner_newPipeliner_Results_Future{Future: ans.Future()}, release
}
func (c Pipeliner) GetNumber(ctx context.Context, params func(CallSequence_getNumber_Params) error, opts ...capnp.CallOption) (CallSequence_getNumber_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xabaedf5f7817c820,
			MethodID:      0,
			InterfaceName: "aircraft.capnp:CallSequence",
			MethodName:    "getNumber",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CallSequence_getNumber_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return CallSequence_getNumber_Results_Future{Future: ans.Future()}, release
}

// A Pipeliner_Server is a Pipeliner with a local implementation.
type Pipeliner_Server interface {
	NewPipeliner(context.Context, Pipeliner_newPipeliner) error

	GetNumber(context.Context, CallSequence_getNumber) error
}

// Pipeliner_NewServer creates a new Server from an implementation of Pipeliner_Server.
func Pipeliner_NewServer(s Pipeliner_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Closer)
	return server.New(Pipeliner_Methods(nil, s), s, c, policy)
}

// Pipeliner_ServerToClient creates a new Client from an implementation of Pipeliner_Server.
// The caller is responsible for calling Close on the returned Client.
func Pipeliner_ServerToClient(s Pipeliner_Server, policy *server.Policy) Pipeliner {
	return Pipeliner{Client: capnp.NewClient(Pipeliner_NewServer(s, policy))}
}

// Pipeliner_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Pipeliner_Methods(methods []server.Method, s Pipeliner_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd6514008f0f84ebc,
			MethodID:      0,
			InterfaceName: "aircraft.capnp:Pipeliner",
			MethodName:    "newPipeliner",
		},
		Impl: func(ctx context.Context, call server.Call) error {
			return s.NewPipeliner(ctx, Pipeliner_newPipeliner{
				Args:    Pipeliner_newPipeliner_Params{Struct: call.Args},
				Results: Pipeliner_newPipeliner_Results{Struct: call.Results},
				Ack:     call.Ack,
			})
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 2},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xabaedf5f7817c820,
			MethodID:      0,
			InterfaceName: "aircraft.capnp:CallSequence",
			MethodName:    "getNumber",
		},
		Impl: func(ctx context.Context, call server.Call) error {
			return s.GetNumber(ctx, CallSequence_getNumber{
				Args:    CallSequence_getNumber_Params{Struct: call.Args},
				Results: CallSequence_getNumber_Results{Struct: call.Results},
				Ack:     call.Ack,
			})
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	return methods
}

// Pipeliner_newPipeliner holds the state for a server call to Pipeliner.newPipeliner.
// See server.Call for documentation.
type Pipeliner_newPipeliner struct {
	Args    Pipeliner_newPipeliner_Params
	Results Pipeliner_newPipeliner_Results
	Ack     func()
}

type Pipeliner_newPipeliner_Params struct{ capnp.Struct }

// Pipeliner_newPipeliner_Params_TypeID is the unique identifier for the type Pipeliner_newPipeliner_Params.
const Pipeliner_newPipeliner_Params_TypeID = 0xbaa7b3b1ca91f833

func NewPipeliner_newPipeliner_Params(s *capnp.Segment) (Pipeliner_newPipeliner_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Pipeliner_newPipeliner_Params{st}, err
}

func NewRootPipeliner_newPipeliner_Params(s *capnp.Segment) (Pipeliner_newPipeliner_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Pipeliner_newPipeliner_Params{st}, err
}

func ReadRootPipeliner_newPipeliner_Params(msg *capnp.Message) (Pipeliner_newPipeliner_Params, error) {
	root, err := msg.Root()
	return Pipeliner_newPipeliner_Params{root.Struct()}, err
}

func (s Pipeliner_newPipeliner_Params) String() string {
	str, _ := text.Marshal(0xbaa7b3b1ca91f833, s.Struct)
	return str
}

// Pipeliner_newPipeliner_Params_List is a list of Pipeliner_newPipeliner_Params.
type Pipeliner_newPipeliner_Params_List struct{ capnp.List }

// NewPipeliner_newPipeliner_Params creates a new list of Pipeliner_newPipeliner_Params.
func NewPipeliner_newPipeliner_Params_List(s *capnp.Segment, sz int32) (Pipeliner_newPipeliner_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Pipeliner_newPipeliner_Params_List{l}, err
}

func (s Pipeliner_newPipeliner_Params_List) At(i int) Pipeliner_newPipeliner_Params {
	return Pipeliner_newPipeliner_Params{s.List.Struct(i)}
}

func (s Pipeliner_newPipeliner_Params_List) Set(i int, v Pipeliner_newPipeliner_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Pipeliner_newPipeliner_Params_List) String() string {
	str, _ := text.MarshalList(0xbaa7b3b1ca91f833, s.List)
	return str
}

// Pipeliner_newPipeliner_Params_Future is a wrapper for a Pipeliner_newPipeliner_Params promised by a client call.
type Pipeliner_newPipeliner_Params_Future struct{ *capnp.Future }

func (p Pipeliner_newPipeliner_Params_Future) Struct() (Pipeliner_newPipeliner_Params, error) {
	s, err := p.Future.Struct()
	return Pipeliner_newPipeliner_Params{s}, err
}

type Pipeliner_newPipeliner_Results struct{ capnp.Struct }

// Pipeliner_newPipeliner_Results_TypeID is the unique identifier for the type Pipeliner_newPipeliner_Results.
const Pipeliner_newPipeliner_Results_TypeID = 0xbbcdbf4b4ae501fa

func NewPipeliner_newPipeliner_Results(s *capnp.Segment) (Pipeliner_newPipeliner_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Pipeliner_newPipeliner_Results{st}, err
}

func NewRootPipeliner_newPipeliner_Results(s *capnp.Segment) (Pipeliner_newPipeliner_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Pipeliner_newPipeliner_Results{st}, err
}

func ReadRootPipeliner_newPipeliner_Results(msg *capnp.Message) (Pipeliner_newPipeliner_Results, error) {
	root, err := msg.Root()
	return Pipeliner_newPipeliner_Results{root.Struct()}, err
}

func (s Pipeliner_newPipeliner_Results) String() string {
	str, _ := text.Marshal(0xbbcdbf4b4ae501fa, s.Struct)
	return str
}

func (s Pipeliner_newPipeliner_Results) Extra() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s Pipeliner_newPipeliner_Results) HasExtra() bool {
	return s.Struct.HasPtr(0)
}

func (s Pipeliner_newPipeliner_Results) SetExtra(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

func (s Pipeliner_newPipeliner_Results) Pipeliner() Pipeliner {
	p, _ := s.Struct.Ptr(1)
	return Pipeliner{Client: p.Interface().Client()}
}

func (s Pipeliner_newPipeliner_Results) HasPipeliner() bool {
	return s.Struct.HasPtr(1)
}

func (s Pipeliner_newPipeliner_Results) SetPipeliner(v Pipeliner) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(1, in.ToPtr())
}

// Pipeliner_newPipeliner_Results_List is a list of Pipeliner_newPipeliner_Results.
type Pipeliner_newPipeliner_Results_List struct{ capnp.List }

// NewPipeliner_newPipeliner_Results creates a new list of Pipeliner_newPipeliner_Results.
func NewPipeliner_newPipeliner_Results_List(s *capnp.Segment, sz int32) (Pipeliner_newPipeliner_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Pipeliner_newPipeliner_Results_List{l}, err
}

func (s Pipeliner_newPipeliner_Results_List) At(i int) Pipeliner_newPipeliner_Results {
	return Pipeliner_newPipeliner_Results{s.List.Struct(i)}
}

func (s Pipeliner_newPipeliner_Results_List) Set(i int, v Pipeliner_newPipeliner_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Pipeliner_newPipeliner_Results_List) String() string {
	str, _ := text.MarshalList(0xbbcdbf4b4ae501fa, s.List)
	return str
}

// Pipeliner_newPipeliner_Results_Future is a wrapper for a Pipeliner_newPipeliner_Results promised by a client call.
type Pipeliner_newPipeliner_Results_Future struct{ *capnp.Future }

func (p Pipeliner_newPipeliner_Results_Future) Struct() (Pipeliner_newPipeliner_Results, error) {
	s, err := p.Future.Struct()
	return Pipeliner_newPipeliner_Results{s}, err
}

func (p Pipeliner_newPipeliner_Results_Future) Extra() *capnp.Future {
	return p.Future.Field(0, nil)
}

func (p Pipeliner_newPipeliner_Results_Future) Pipeliner() Pipeliner {
	return Pipeliner{Client: p.Future.Field(1, nil).Client()}
}

type Defaults struct{ capnp.Struct }

// Defaults_TypeID is the unique identifier for the type Defaults.
const Defaults_TypeID = 0x97e38948c61f878d

func NewDefaults(s *capnp.Segment) (Defaults, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return Defaults{st}, err
}

func NewRootDefaults(s *capnp.Segment) (Defaults, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return Defaults{st}, err
}

func ReadRootDefaults(msg *capnp.Message) (Defaults, error) {
	root, err := msg.Root()
	return Defaults{root.Struct()}, err
}

func (s Defaults) String() string {
	str, _ := text.Marshal(0x97e38948c61f878d, s.Struct)
	return str
}

func (s Defaults) Text() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextDefault("foo"), err
}

func (s Defaults) HasText() bool {
	return s.Struct.HasPtr(0)
}

func (s Defaults) TextBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytesDefault("foo"), err
}

func (s Defaults) SetText(v string) error {
	return s.Struct.SetNewText(0, v)
}

func (s Defaults) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.DataDefault([]byte{0x62, 0x61, 0x72})), err
}

func (s Defaults) HasData() bool {
	return s.Struct.HasPtr(1)
}

func (s Defaults) SetData(v []byte) error {
	if v == nil {
		v = []byte{}
	}
	return s.Struct.SetData(1, v)
}

func (s Defaults) Float() float32 {
	return math.Float32frombits(s.Struct.Uint32(0) ^ 0x4048f5c3)
}

func (s Defaults) SetFloat(v float32) {
	s.Struct.SetUint32(0, math.Float32bits(v)^0x4048f5c3)
}

func (s Defaults) Int() int32 {
	return int32(s.Struct.Uint32(4) ^ 4294967173)
}

func (s Defaults) SetInt(v int32) {
	s.Struct.SetUint32(4, uint32(v)^4294967173)
}

func (s Defaults) Uint() uint32 {
	return s.Struct.Uint32(8) ^ 42
}

func (s Defaults) SetUint(v uint32) {
	s.Struct.SetUint32(8, v^42)
}

// Defaults_List is a list of Defaults.
type Defaults_List struct{ capnp.List }

// NewDefaults creates a new list of Defaults.
func NewDefaults_List(s *capnp.Segment, sz int32) (Defaults_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return Defaults_List{l}, err
}

func (s Defaults_List) At(i int) Defaults { return Defaults{s.List.Struct(i)} }

func (s Defaults_List) Set(i int, v Defaults) error { return s.List.SetStruct(i, v.Struct) }

func (s Defaults_List) String() string {
	str, _ := text.MarshalList(0x97e38948c61f878d, s.List)
	return str
}

// Defaults_Future is a wrapper for a Defaults promised by a client call.
type Defaults_Future struct{ *capnp.Future }

func (p Defaults_Future) Struct() (Defaults, error) {
	s, err := p.Future.Struct()
	return Defaults{s}, err
}

type BenchmarkA struct{ capnp.Struct }

// BenchmarkA_TypeID is the unique identifier for the type BenchmarkA.
const BenchmarkA_TypeID = 0xde2a1a960863c11c

func NewBenchmarkA(s *capnp.Segment) (BenchmarkA, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2})
	return BenchmarkA{st}, err
}

func NewRootBenchmarkA(s *capnp.Segment) (BenchmarkA, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2})
	return BenchmarkA{st}, err
}

func ReadRootBenchmarkA(msg *capnp.Message) (BenchmarkA, error) {
	root, err := msg.Root()
	return BenchmarkA{root.Struct()}, err
}

func (s BenchmarkA) String() string {
	str, _ := text.Marshal(0xde2a1a960863c11c, s.Struct)
	return str
}

func (s BenchmarkA) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s BenchmarkA) HasName() bool {
	return s.Struct.HasPtr(0)
}

func (s BenchmarkA) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s BenchmarkA) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s BenchmarkA) BirthDay() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s BenchmarkA) SetBirthDay(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

func (s BenchmarkA) Phone() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s BenchmarkA) HasPhone() bool {
	return s.Struct.HasPtr(1)
}

func (s BenchmarkA) PhoneBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s BenchmarkA) SetPhone(v string) error {
	return s.Struct.SetText(1, v)
}

func (s BenchmarkA) Siblings() int32 {
	return int32(s.Struct.Uint32(8))
}

func (s BenchmarkA) SetSiblings(v int32) {
	s.Struct.SetUint32(8, uint32(v))
}

func (s BenchmarkA) Spouse() bool {
	return s.Struct.Bit(96)
}

func (s BenchmarkA) SetSpouse(v bool) {
	s.Struct.SetBit(96, v)
}

func (s BenchmarkA) Money() float64 {
	return math.Float64frombits(s.Struct.Uint64(16))
}

func (s BenchmarkA) SetMoney(v float64) {
	s.Struct.SetUint64(16, math.Float64bits(v))
}

// BenchmarkA_List is a list of BenchmarkA.
type BenchmarkA_List struct{ capnp.List }

// NewBenchmarkA creates a new list of BenchmarkA.
func NewBenchmarkA_List(s *capnp.Segment, sz int32) (BenchmarkA_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2}, sz)
	return BenchmarkA_List{l}, err
}

func (s BenchmarkA_List) At(i int) BenchmarkA { return BenchmarkA{s.List.Struct(i)} }

func (s BenchmarkA_List) Set(i int, v BenchmarkA) error { return s.List.SetStruct(i, v.Struct) }

func (s BenchmarkA_List) String() string {
	str, _ := text.MarshalList(0xde2a1a960863c11c, s.List)
	return str
}

// BenchmarkA_Future is a wrapper for a BenchmarkA promised by a client call.
type BenchmarkA_Future struct{ *capnp.Future }

func (p BenchmarkA_Future) Struct() (BenchmarkA, error) {
	s, err := p.Future.Struct()
	return BenchmarkA{s}, err
}

const schema_832bcc6686a26d56 = "x\xda\xacZ{x\x14U\x96?\xa7\xaa\xbb+\xe4\xd5" +
	"]}+\x04B0\x92\x01\x87D\xc1<0 \xb3~" +
	"\x09\x98\x8c\xe8\x82\x93\xa2A\xc4\x95\x91JR!\x8d\xfd" +
	"\xb2\xbb\x1a\x12\x1f\x1f\xba\x03#\xf8\xc9\x8e|\xe2(*" +
	"\xbbN\x16\xd7\x17\xb8\xa2\xb2+\x0c>p\xd0\x81\xa8\xab" +
	"\xb0\xf8\x80U\x1cq}\x80\xba\x03\xce\xb0\x82\xa2\xb5\xdf" +
	"\xb9\xdd\xd5U\xe9t\x8b\xf2\xed?\xa4\xfa\xfeN\x9d{" +
	"\xeey\xdfS\xd4\x95\x97\xb4\x08\xf5\xee\x87\x14\x00\xf5\xa8" +
	"\xdbc\xbet\xe2\x8b\xb7\xean\x18\xb7\x02T/\xa2y" +
	"E\xb8\xff\xd7\xdd\xaf\x9e\xfb+pI\x00\xec\xc2\xc2\x01" +
	"\xd6VHO\xd3\x0a\x9b\x01\xcd\x05\xaf\xf8~9l\xfb" +
	"\x8c[\xb3h\xdd\"\x91h\x85\xdbX\x90\x13\xeb\x85\x9f" +
	"\x00\x9a\xef<\xf5]\xddO\x9a\xffp+\xc8^'-" +
	"J\x00\x8d\x0b\x8a\xfc\xc8\xc2ED\x1c,\"\xceS{" +
	"[\x9a\x9e|m\xcc\xca,\xce\xad\x92\x00\xc0\xd6\x15\x0d" +
	"\xb0\x079\xf1\xef\x8a\x96\x02\x9a\xfd\x7f\x19\xf5\xf6\xd3\xd7" +
	"\x0c\xbf\x0dd\x05!\xcd\xf1\xdb\"\x01\x01\x19\x16\x13\xb7" +
	"I\xe3\xc6\x1f\xdeQ\x1d\xf8\x07\x90\xbd\xa2\xcd\x0c\x90\x8d" +
	")\xeeg5\xc5\xc4i\\\xf1%l\x16=\x99w\xec" +
	"\xaazy\xda\x0d\x8f\xff&KN\x81\xa8.(>\xc4" +
	"\xa6q\xfa\x8b\x8aig3\xfe\xea\x11u\xdd\xee;\x07" +
	"\xd3r]=X\xfc\"\xdbT,\x81h\x16\xef\xfb\xed" +
	"N\xffcukA\xf6\xba\x06\xed\xbe\xaax\x80\xddE" +
	"\xdc\x02w\x14\x8b\x18\xd8X, \x80\xb9zL\xc1\xa4" +
	"\x137=\xbf6\x87\x9e\xd8#\xc5\x03l\x0b\xdf\x7f3" +
	"?\xd8\xb5\x91\x85J\xf3w\xcf\xdd\x95K\xa7{\x8a\xfd" +
	"\xc8>\xe0\xc4\xefq\xe2\xd5\xb7V\xbd<c\xd5\x87w" +
	"\x93N\x85\xec\x93\x95\x94\xbc\xc8\xcaJ\xe8=\xb9\xa4\x0a" +
	"\x01\xcd\xf9\x1b\x85\xfb\xee^\xb7\xe5\xde\\b\xd4\x94\x0e" +
	"\xb0\x0bJ\xe9\xa9\xbe\x948\xaf\xbf\xe1\xbd\xad5oO" +
	"\xbe\xcfi\x80\xf9\xa5\x85d\x00\x8d\x13\xec\x9a{\xc8\xbd" +
	"\xed\xa7\xbf\xb9o\x88\x0an)\x1d`\xab\x89S`e" +
	"\xa9\x88\x81\xb5\xa5\\\x05\xc9\x9f\xb9~m6\xd4\xad\xcf" +
	"\xf6+\xbe\xf9\x8a\xd2\x01\xb6\x86o\xbe\xba\x94lp\xf7" +
	"Y{\xceo?\xa9o\x00\xb5\x12\x11\xb8\xf2\x1b\x0f\x97" +
	"\xc6i\xf3\xe3|\xf3\xee\x19\x8b\xbe\xfc\x8e=\xffp\xae" +
	"\x93\x94y_d\xa3\xbd\xf44\xd2K\xb4g\xef*\xef" +
	"\xbd\xe6\xfd\xc7\x1f\x1b\xe2)\x17z\x0f\xb16N8\xcd" +
	"{\x09\x0b\xd3\x93y\xec\xa6Y\xb5\xd3\xe7\xbe\xf1X." +
	"\xed\xcf\xf5V \xd3\xf9\x0b\x1a\xe7\xbc\xf5\xb3'\xa2m" +
	"\x07n\xdd\x94K\x8a5\xde~\xb6\x8e\xd3\xde\xc5i\xe5" +
	"X\xd7\xdb\x11\xf7\xc6\xcd\xb9h\xb7x\xbfd;8\xed" +
	"\xb3\x9cvY\xd3/\x97/\x98rt3\xe9J\xcc\x8e" +
	"\xc1/\xbc{\xd9I\"n<\xee\x9dGVM\x0cL" +
	"2??t\xd6\xbf\xe5\xf2\x81FM\x16\x90\x85e\x1e" +
	"\x852\x85\xec\x86\x7f\xd96\xee\xe5\xf0\xb9\xff\x0e\xaa\x8c" +
	"\xa2\xb9\xff\x81\xb7~v\xf7\xe1s\x8e@\x19JH!" +
	"\xe0\x7f\x14\x90]\xe4'#4\x9eX3\xb0\xf9\xa9\x87" +
	"\xb6\x81<\xd2\xb2\xc1:\xffb\x04\x97\xf95~t\xd9" +
	"\xdf>\xff\xda\xefSHj\xa3\x15~n\x9e5\xfc\xd5" +
	"\xfe\xa2/\xfbO\xea\x07\xfe\x98\xeb\xb0\xc7\xfc\x8f\xb2\x93" +
	"~z:\xee\xa7\xc3N\x98u\xe1\xb3\x1f>\xf6w\xbb" +
	"s\xc5f\x19\x1b`c\x18=\x8df\xc4w\xdbW\xef" +
	"\xbfy\xcd\x92w_\xc9e\x9d>V\x81l\x15'^" +
	"\xc1\x88\xf1=;\x1f)\xfaXn}5\xa7\xc6\xd96" +
	"\xf6,\xa7\xdd\xcai\xfft\xce\x94\x85\x1f>\xf9TN" +
	"\xda/X?;\xcei\x8fq\xdaK\xdb\x0f\xed?\xf4" +
	"x\xeb\x7f\xe4\xb4\x8e\xac\x1ca\xa3\x15\x92g\xa4\xc2\xad" +
	"\xb3\xeb\xe6\x1d\x95\x03G\xee{=\x97\xc8\xc92?\xb2" +
	"\x15e\xf4\xde-e\xc4\xfa\xb9\x03+\x8fm\xf8\xa6\xe9" +
	"\xad\\bl.\xbb\x97m\xe5\xb4[8\xed\xf6\xcbO" +
	"\x1c-hQ\xdf\x1a\xe2\xd6o\x96\x0d\xb0\x0f8\xe1{" +
	"e\x97\xb0a\xc3\xcb\x01\xcc5\x93\x1fZ\x18y}\xfb" +
	";$\xb3+[\xcb'\xcb\x06\x98{8\x09\x84\xc3\xb9" +
	"\xcc\xab_\xd9\xbft\xe5\xc2\xdb\xf7\xe7\x12C/\xefg" +
	"\xe1r\xeeO\xe5$\x06[\xf2M\xb0{\xda\x9e\xf7r" +
	"\x99oUy?[\xc3iW\x97\x93\xf9*wt\x16" +
	"\xfc\xb6\xa2\xf6`\xb6\xe6RR\x94\xefe\xee\x11\\\x8a" +
	"\x11\\\x8a\xf5s\xe6m\xfa\xfd\xe3\xed\x07sU\xad\xb9" +
	"#\x1fe\x0bF\xd2\xd3\xfc\x91\xff\x0ah\xdeY\xf7\xf0" +
	"\xd7\x7f\xb3\xef\x1f\x0f\xe6\xd2\xf2\xb1\x91\x85\xc8\xb0\x82\x88" +
	"\xbf\x1dI\"ozN\x92\xdf\xdc\xd3\xffA\xae\xe3M" +
	"\xa8\xd8\xc6.\xe0\xb4\xf5\x15D\xab\x05\x1a\xfd/\x1d\xd9" +
	"\x9d\x93v~\xc5\xbdL\xe3\xb4\x0b8\xed\x89\xf9\x0f\xfc" +
	"\xea\xfe\xfe\x82\x8fr\x09qS\x85\x1f\xd9jN\xbc\x8a" +
	"\x13o\xfe\xe3\xdc\x83\x8f\xfb.\xff(\xebtm(\xb9" +
	"\xc8++^d;8\xf5\xb3\x15\x14\xb5c\xce?1" +
	"\xea\xd4\x8a\x05\xc4Z\x18d\xec5\xa3\xb6\xb1u\xa3x" +
	"\x9a\x19E\x8ax\xd7s\xf2\x9f\x96/\xbb%[\x06\xee" +
	"\x9b\x87G\x0d\xb0\xe3\x9c\xf6\x18\xa7\x9d\xdfS\xf1\xe7\xa9" +
	"\x9f-\xff8\xd7\xd9\xb6V\x1e`/U\xd2\xd3\x8eJ" +
	"^\x95\xde|n\xc3\xa6\x8a\xeb>\x19\x92\xed\x0fW\x0e" +
	"\xb0\xe3D\x188Z)b\xe0T%\xcf\xf6\x99\xbc2" +
	"\xd8\xd2m(\xd5\xd3\xf6\x95\xb7\xb1\x93\x95<\x85U>" +
	"_H\x8eQ\xb0`\xfa\xb0M\xbf8\x96K\x92u5" +
	"\x07\xd8\x835\xbc3\xa8\xe1a=\xd2\x7f\xdb_\xff\xfe" +
	"\xd6\xe3 WZiiO\x0dOK\xdfv_\xb2\xbb" +
	"\xed]\xf7WY\x89\x90;\xcc\xb35{\xd9n\xce\xe5" +
	"\xa5\x1ar\xc5\xc5#B\x97(\xad\xe6W\xb9v\x1cS" +
	"\xbb\x97M\xa8\xe5E\xb1\x96v<8\xf3\xb9;\xc7\x1b" +
	"\xff|*\x97#\x86k\xf7\xb2>N\x9b\xacm\x86\x09" +
	"\xa6\x16\x8cw\xc6\xb5nC\x98\xd8\xa9\xc5\"\xb1\xa9\x01" +
	"C\xeb\xbc6\x18Y4\x1d\xa0\x1dQu\x89.\x00\x17" +
	"\x02\xc8%\xd5\x00j\x81\x88\xaa\"\xa0\x14I\x86\xd1\x05" +
	"\x02\xba\xc8\xe3\xd2\x1c0\xcd\xe1\xe2\xe6h2b\xe8q" +
	"z\xdd\x97y]\xab\x05P\xaf\x16Q\xed\x11\x10Q\xa1" +
	"*)\xeb\x0d\x00\xeaB\x11\xd5\x90\x80\xb2\x80\x0a\x0a\x00" +
	"r\xf02\x00\xb5GDu\xb9\x80\xb2(((\x02\xc8" +
	"\xb7L\x07Po\x14Q\xbdG@o\"x\xbd\x8en" +
	"\x10\xd0\x0dX\xb54\x1a\xefJ`1\x08X\x0ch\xd2" +
	"\xafP0a\x00\x00\x96\x02\xb6\x8b\xc8\xa1R\xc0e\x1d" +
	"A\x83\x10k\x19S\xcb\x19\xe9\xc5\xb4\xf43\xa2\xa1\xae" +
	"\xc4\x15z|\xce\xd2\xe8\x9c\xa5\xd1\xf6P\x12\x13Yz" +
	"\x98\x9a\xd6\xc3X\x01\x9b\xc3}N\x9e>;\xd5\x02\x0e" +
	"\xe2ni\xf7\x8ah\xb0kn$\x18\x8d\xa4\xb4[ " +
	"\xba\x8aM\x93\xb3\xad\xf1\x03\xa8cET\xeb\x04,\xc1" +
	"\xef\xcc\x94\x86&\xd0\xeax\x11\xd5I\x02\xa2\x06\x1e\xec" +
	"\x00\xcf\x10\x91\xdb:{\xa2\x13\xf5\xce\x9e\xe8\xd8v-" +
	"\xae\x85\x13\xe0\x94\xb6\xc2\xb6\x9a\x18\x8cd\x14\x95m\xb4" +
	"6\xa9\xb3'\x9a:\xa8\x1b \xd3\xcd\xa2\xd5U\xc9r" +
	"-\x08\xb2[\xf2\xd2>-\xd8\x8e\x98\xd7sfK\xd1" +
	"\xa8\x91>\x1d\xa2\x0b\x11\xe5\x9a\xc5\xf61|i\xe3_" +
	"HG\x9b$\xa2\xda\"\xa0\xa9\xcd\x0b\x1a=\xadz7" +
	"x\xb5d\xc8@\x9f\xdd}\x01\xa2\x8f+\x0bk\x01P" +
	"\x1b\x02\xe5\xd0\xb1\x1eo\x0b\xc7\x8c>\xc8%dg4" +
	"\x920fr\x0f!\x9e\x19\xc3er77\x1c\xc8X" +
	".\x17\xa0\xf7}\xa9`\x14\xfdS\x99k\x93_D\xf4" +
	"v#\xfe\xbda\x123\xe2\xe8\xb3\xc31K\xe0\xdc." +
	"73\x98@\xe3G\xb8\\\xa6\x9b\xca\xe3r\xadz7" +
	"\xe94\xc1\xe5TR<\x11\xe5\x9b(\x1e{\xd3a\xc6" +
	"\x03\x12Q^A\x8b7\x8b\xa8\xde. \x0a\x0a\x0a\x88" +
	"\xf2j\x0a\xd2\x95\"\xaak)\x1eQA\x11Q^C" +
	"\xa7\xbc=\x15\x8f\xb2KP\xc8\xcc\xf2]\xf4\xf6\x1d\"" +
	"\xaa\xf7\x0b\xe85\xf4^#\xedm c\xb5\xd4\x1d\x8d" +
	"z\xbb4C\xc3\x12\x10\xb0\x84\xd6*\xa4\x0e-^\xd5" +
	"\x1d\x8aj\x06\x16\x82p\xac\xf0\x0f\xc7g\xb4\x00J\xc1" +
	"\x88A\xb9\xe5\x98k\x85i\x9a\x80\xde$-\x14\x80 " +
	"\x17\xd4\xe68\xde\xbc\xb8\x16K\x99;\xdb\x10O\x02\xa8" +
	">\x11\xd5J\x01\xcdppQ\x8fqy\xd4\xc0\xe9\xfa" +
	"l]\x0b\x85\xfa\xaa\xf8;\xe8\xb3oOy\x8cc\x07" +
	"\xd7l=\xc1\xf5\x08\xf9\xac\x1dM\x1aC\xe2k\x90\xdf" +
	"\xb5E\x92\xe1\x94\xdfy\xed\x02\x09\xe8\xf6\"\xe4\x0f\xa7" +
	"i\x99T\x91\xde\xb3\xa6\xda\xce\x14V&u\xe6\x09g" +
	"r\xc6\x0e\xf4\xd9\xb7\xe9\xac#\xba\xac\x84\xad\x85B\x01" +
	"\xfd\xba\xa4\x1e\xe9\xd4'.\xd2\x8d\xcb\x93\xe1\x0e=>" +
	"v\xb6^\xc5\x0f\xec<\xae\xdf>.F\xc8(X\x90" +
	"Ct\xd2\xd9t-\xa1g[\xa4\xd6~\x9b\xe7\x11\x94" +
	"\xed[1 \xca9Xed\x93\"\x9d\xba\x9d\x9f\xac" +
	"\x9a\x8a\xd6\xc5K\x96g\x83 \x0f\x93LK~\xc0\xf8" +
	"\xe04\x95\x1dm\xbf\x88\xe8\xad\x9a\xa1\xcd\x0c\x8a\x89\x1f" +
	"\x13n\xce`.\xcd\x91HgHQ\xa3\xe7{\xce\xdd" +
	"\xa1%t\xf4\xd9\xf7\xc1<I\x8cRT\xc0\x88';" +
	"\xab\x8c\x8b\xb5X$O\x8e\x19+\xa0\xb4D\xef\xb4\xa5" +
	"\xcb\xf4%y\x92\xc1l}Q\\O$\x82Q\xe4," +
	"GdX\xae#\x19\xd7\x8a\xa8>`;\xd5z\xaa\x1d" +
	"\xf7\x88\xa8np\x94\xe7\xdf\x11\xe1\xfd\"\xaa\xcf8\xca" +
	"\xf3\x16\xd2\xd8\x13\"\xaa\xafR:@\x05]\x00\xf2n" +
	"\x92r\xa7\x88\xea\x1b\x02\xcanAA7\x80\xfc\x1a-" +
	"\xee\x12Q\xddg\xeb\"\xd3\xeb\xa7t!v\xd4a\x11" +
	"\x08X\x04\xe8\xed\xd0\x0d\xcd:]Q\xaab7\xc7B" +
	"ZDO\xd8g\xce4\xa6\xa93K}\xe1\xa4\xf5\xbe" +
	"\xd4\x97\xe8\xb2\x9e\x878B*\xe3\x92\x0fP\xa17\xe2" +
	"\x90\xd5\xb0T\xdb\x0d\x8b\x9c\xe9X\xaa\xed\x8e\x85'H" +
	"jXH#]\"\xaa1+A\x02\xc8\xe1\xdat\x17" +
	"c\x90\x89\xb4\x10\x8a \xa0\x08(u%\xa3V\xef\xe2" +
	"\x8d\x19\xf1\xfa\xa1\xf5\x81\x96\x1b\xbe\xa7lX\x9ev\x95" +
	"w\xe2\xa2x\x8c\x12\x03\x95\xd4Z\xca\x0c\x0dvf\x90" +
	"I\xbcs)5L\xb5SCUw0\x9e0p\x18" +
	"\x088\x0c\xb09\xa1wF#]\xd6\xcf!y\xa1=" +
	"\x18\xd3C\xc1\x88\x1e\x9f\x18\xd1\x97f~\x8cm\xd7\xbc" +
	"\xd4e\xfcP\xf2L\x1aqd\xb0ArZ)l6" +
	"\x80z\x9e\x88\xea\x14\x01\xab\xf4^#\xae\xa1\x1f\x04\xf4" +
	"\x03\x9a\xb143\xc08\xca\xf6=2+e\xd8z\xa1" +
	":\xf3=!\xe8(C9\xbb\x87\xb4;d\xa7\xdd\xda" +
	"\\B\xd7\xda\xca=Cs\xe6\xe8\x02\xce$/e\xee" +
	"\x12y\xf2\xd2U\xcd\x09=\xbe$\xd5\x95;Xv\x00" +
	"\xa8\xc5\"\xaa\xe3\x054\x97jA#\x18Y\xb4\x18\xa4" +
	"h\x87#\xbe2\x17\xe6<\x9c\xa7K\x93\x1b'\x9f>" +
	"\xe3eEy\x1e\xc5\xcfY\x1a\xf5\xb6\x87\x92\x89\xac\xec" +
	"Tmg\xa7\x8c\xee\xd7W\xdb\xe9\xc9\x8a\xc5Lvz" +
	"\xd8\x11\x8b\x0f\xd2\xe2\x03\"\xaa\x1b\xadf\x05@~\x84" +
	"\xde\xde \xa2\xfa\x84#;m\"\xca\x87ETw\x9e" +
	">j\x9d}\x97\xc3\xccY\xcb\x92\x11\xcf\xdcU\xbc\xa1" +
	"\x84\xd1h\xe9\xd5}\xfa\xfbG\xbb\x11\xff\xb1\xcd`f" +
	"6\x95\xcfV\xa2\xb6(\x8b\xddt\xdbT\xcb:S7" +
	"7\xf4\xd9S\xf5<\xd6\xca\xc4\xb7\xd5vQU\xb6\x06" +
	"ph\xcd\xdbdyq\xaa*[\x19\x01\xbc\xf4N\x0b" +
	"\xaa.t\xcc9\x01\x86\xf2\xa7$\xcf{\x08\xc8_\xa8" +
	"lWhH\xbb\xc2\xd3\xb6+l&=m\xb4\x0aU" +
	"KV\xa1\xda\xeep\x85\xadt\xe3|&eu\xd9-" +
	"\xa6\\a\x07-\xbe\x90*i\xde\x88\x16\xd6\xad\xd6\xae" +
	"\xaa'\x1a\xb6\xcb\xcf\xa0F\x8e\x97\xa7\xb8FAd\xd9" +
	"\xbc\xb9S\x8b\xfc<\xd4\xc7\xaf\x9b\xd4\xe5uj1\xad" +
	"3H\xdd*X$fX\xeb\x0d\xc4t\xbd\x8b\xd6\xb2" +
	"\x8b\x95e\xb8iRcC\xdd\x99\x07Y&\x0bH\x8b" +
	"\xa3\x1d\xf9\xdb\xc9\xa1y\xadU@\xa93\xdce\x1d\xde" +
	"\xab\xc5\x17%\xb2n\xd6Cl7]\x8ft\xf6\x84\xb5" +
	"\xf8\xb58\xed\x074\x19\x979\"\xd6j2\x1elp" +
	"D\xac\xd5d<rY:8\x9f&\xdb-L\xd9n" +
	"\x90\x95\xad0\xde\xd2`[y\x90\xed\xcc\x8e`\xdc\xe8" +
	"i\xd5\x9c\xea\xaf\x8a\xf5D#6E\"\xd8\x11\x0aF" +
	"\x16%\x88\"\xddD7'b\xd1dB\xb7lX\x15" +
	"\x8eF\xf4\xbe\xbc\x96\xe2\xe5\x87\xb7\xaa\xc5\x99\x83\xb7\xd1" +
	"\xc1[DTg\xa6\x0b3-^JR\xb6\x8a\xa8\xb6" +
	"\xd3\xc9\xc5\xd4\xc9g\x915f\x88\xa8\xce\x11\xd0\xdb\xa7" +
	"kq+\x05\xd1\xaeF\x0fz@@\x0f%$\xad\xcf" +
	"z\xce\x9bB\xf8\x15's\xd7\xfd\xa1)\xc4y!\xca" +
	"\x95B\xe65\xc7\xb5XCo\xc3\x19\xdd\xb6\xb2\xb2\xe3" +
	"\x10\xe6?\x17\xeb\x9b\xce\xdc\xcbs\xb4\xf8g\x90C3" +
	"\xdf\xbe\xf2\xf4\xd0\xd3\xd2\xbf\xad~\xd1\x9a\xe08'\\" +
	"\xf6\x04G\xaf\xb5;\xc6\x12\xe1[sh\xcfX\"\x9e" +
	"2\xd3Mc\xb5\xdd4z\x97D\x83]\xe0\xf1vL" +
	"n\x9c\x8c>{\xde\x9f\xae6ZcC\x1d\xc9j\x0d" +
	"\xbe\xd3\xd5\xa6\xbb\xbe\x09}\xf6\x0c8\x8f\x96\xa75\x07" +
	"\xe3\xb1h\x9c+\xa52\xe5v\xb5\xbc\x9bj\xab\x06@" +
	"A\xbe\x88\xfe\x88\xf2\x05\xf4\xc7%O\xa0?ny\x1c" +
	"\xfd\xf1\xc8\xa3k\x01\xbc\x91hD\x97\x16w_+\x85" +
	"\xb4^)\xd1\x1d\x95B\xc9%RW\xf7R\xaf\xa1'" +
	"\x8c!\x0a\xe3\xe6\x98\xa3\xf7\xa6\xfd\xd0\x11\x16\xd5\xce\xb0" +
	"H'\x84K\xab\xd3a\xb1\x90\xc2\"\x9d\xcc\x17\x90\xc1" +
	"\xaeLM+$#3Y@)d[.\x9d\x8e\x9a" +
	"C\x09\xc3\xb1z\x9a\\5/\xe5\xcc\xb1\x90\x98L\x9c" +
	"\x91G;'~\xbe|\x17\xffV\xcdH\x15\xb2\xacI" +
	"\x93\x0f\xc0\x97\x9a2\x0dM#)e\xed\xcc\xf8\x17\x9b" +
	"\xe5\xae\x05\x08\xccp\x8b\x18\x98\xe3v\xb8\x18S\xdd\x15" +
	"\x00\x81\x99\x04\\\xe9\x16p\xb4\xf0\xad\x99\xca\xa3l\xae" +
	"\xbb\x1a \xd0N\xc8\xd5\x84\x88\xa7\xccT2e\xf39" +
	"2\x87\x90\x85\x84\xb8\xbe1S\xd76\xb6\x80#W\x12" +
	"\xd2E\x88\xfbk3\x95V\x99\xc6\x91\xab\x09\xe9!\xc4" +
	"s\xd2t)\xe8\x01`:G\x16\x12\x12\"D:a" +
	"\x16(|4\x1d\xe4\xb2u\x11\x12#\xa4\xe0+\xda\xa7" +
	"\x00\x80\x85\xf9;=\x84\x18\x84\x0c\xfb_\xdag\x18\x00" +
	"\xbb\x8e#!Bz\x09)<N\xfb\x14\x02\xb0$G" +
	"b\x84\xdcHH\xd1_i\x9f\"\x00\xd6\xc7\xf71\x08" +
	"\xb9\x99\x90\xe2\xbf\x98-\x0a\x16\x03\xb0\x9b\xb8\xdaz\x09" +
	"YNj+\xf9\xd2T\xb0\x04\x80\xdd\xc2\x81\x1b\x09X" +
	"I@\xe91S\xc1R\x00\xb6\x82\x037\x13p;\x01" +
	"\xde\xa3\xa6\x82^\x00\xb6\xca=\x15 \xb0\x9c\x80\x07\x08" +
	"\xf0\xfd\xd9T\xc8\x86l=\x07\xee!\xe0i\x02\xe4\xff" +
	"1\x15\x94\x01\xd8f\x0el$`\x17\x01\xfe/L\x05" +
	"\xfd\x00\xec%\x0e\xbc@\xc0\xbb\x04\xb0\xcfM\x05\x19\x00" +
	"\xdb\xcf\x81}\x04\x1c%@\xf9\xccTP\x01`_\xb8" +
	"\x1b\x00\x02\x9f\x12\xe0\xf2\x08XRv\xc4T\xb0\x0c\x80" +
	"\xa1\x87\xde8E\xc0\x08\x02\x86\x1f6\x15\x1c\x0e\xc0\xca" +
	"8\xe0\xf3\x88\x188\x8f\x80\xf2OM\x05\xcb\x01X\x0d" +
	"\x07\xc6\x12\xd0B\xc0\x88OL\x05G\x00\xb0\x8b<\xb4" +
	"\xc7\x14\x02\xe6\x10P\xf9\xb1\xa9\xe0Hr1\x0f\xa9d" +
	"&\x01=\x04\x8c\xfe\xc8T\xb0\x82,\xef\x99N\x96'" +
	"\xe0v\x02\xce\xfaoS\xc1Q\xa4+\xcej9\x01w" +
	"\x10P\xf5\xa1\xa9`%\x00[\xcd\x81\x95\x04\xac%\xe0" +
	"\xecC\xa6\x82\xa3\x01\xd8\x1aO\x07@\xe0\x0e\x026\x12" +
	"0\xe6\x03S\xc1\xb3\x00\xd8#\x9e\xcb\x00\x02\x0f\x13\xf0" +
	"4\x01\xd5\x7f2\x15\xac\"\xedz\xae\x02\x08<A\xc0" +
	"v\x02~\xf2\xbe\xa9\xe0\xd9\x00l\xabg6@\xe0\x19" +
	"\x02vz\x04\x1c=\xf6 y\xd0\x18\x00\xb6\x83\xcb\xbb" +
	"\x9d\x90]\xf4\xca\xb8\xf7L\x05\xab\xc9 \xfc\x84/\x10" +
	"\xf0*\x01\xe7\xbck*\xf8\x13\x00\xb6\x9b\x03;\x09x" +
	"\x83\x80\x9f\xfe\x97\xa9\xe0X\x00\xf6\x9a\x87\x9cq\x17\x01" +
	"\xfb\x08\x18\x7f\xc0Tp\x1c\x00\xdb\xc3\xe5}\x83\x80\xcf" +
	"\x09\xa8\xd9o*x\x0e\x00;\xcc\x81O\x09pI\x02" +
	"\x96\x8c|\xc7T\xf0\xa7dB\x89\xa4:E\xc0\x08\x02" +
	"*\xde6\x15\x1cO&\xe4\x80O\"\x13\x120\xea-" +
	"S\xc1\x1a2!\x07\xc6\x12\xd0B@\xed\x9b&:\xbe" +
	"\x95\xb3\x8b\xa4j\x10J\xce\xddg*x\x1e\x00\x1b'" +
	"\xd1!\xce\xce\xf09\xef?M\x05'p>S\x07\xf1" +
	"\x99\xb0\xd7Tp\"\xb9\x02\x07\xa6\x10\xd0J\xc0\xc4=" +
	"\xa6\x82\xe7\x03\xb0i\x12\xe9\xb6\x85\x80\x99\x04\x9c\xff\x86" +
	"\xa9`\x1d\x00\xbb\x94\x8b\xd4J@;\x01u\xaf\x9b\x0a" +
	"\xd6S\xe2\x92\xe2\xe4<\x04\\)e*\x9bx\xfd\xf5" +
	"\xe8\xb3\xbf\xbbY\x05\xaciRfx\xd3\xdd\xd8\x80\x85" +
	" `!\xa0\x14l\x9ad5lR\xb0\xb1\xc1j\xcd" +
	"\xa4`}\x93\xd5!\x89\xc1)(\x80\x80\x02\xa0\x94l" +
	"\x9ad\x8d5\xa4dc\x835\xa9\x94\x92\xf5M(\x81" +
	"\x80\x12\xa0\x98\x9cbuP\xde\x8eh4d\xb5w\xce" +
	"\xc95z;B\xd1\x0ekV\xd0\xdc\xdd4\xc91m" +
	"\xb3\xe6Q\xdd\x8d\x0d\x8e\xd5\xc2\xf4jp\x10\xad\xdbZ" +
	"\x1dD\xeb\xb2V\xeb\x9b\x1c\xabbj\xb5*8\xc5\xb1" +
	"(\xa4I\x93\x83\xd8\x0e\xb3V\x07\xb1-\xb0V\x07\xb1" +
	"\x95\xd2l\x93N\xb6\x9e\xd4\xa2\xf7\xfaASD\xa7Q" +
	"J\x01\x97\x11\xea \xc8GWu=u\xbeCJ\\" +
	"j]C\x9f\xfd\xbf,\xb2j%\x0c\x1ebf\x0d\xf4" +
	"l2\x80,\x94\x98\xc4\xd3#M\x10\xa3\x11\xf4\xd9\xff" +
	"\x15%\x0d\xf3ia\x87\x96\x00\xcc\xd19.\xd3R\x8d" +
	"P\xd65\xceK\x86\xff\x7f\xe8\xbb\xb8>\x96\xe8\x9d\x8e" +
	"\xaf\x91\xd9_\x9aRDZ6\x91SS\xfc\xe3e4" +
	"\x1ar\xe8(\xfd\xf1rY\xfaUk\xb9$\xbdL\x1e" +
	"\xecXN\xf7>\xd2\xa2x,\xcf\xd8\xbd\x99\x96\xedK" +
	"\xed`\x9c\\I\x8b\xf4\xb5\x1b\xf1\xcc@N\x8b\xf4\xf1" +
	"\xe14\xa0\x81~\x17\x02\xd2\xea2-\xc2o\x1b\xe8w" +
	"\x09\xa9\x15\xa2\xbbX\x8bi\x1dP\x15\x0c\x05\x8d>\xf4" +
	"\xbbD\x0b\xc9j\x93.\xd7\x13\x86\x1e\xaf\xbfX\x13\x87" +
	"\x0c\xbbk\xed^\xdd\x9b0\xe2y\xaf\x9f\xa7\xf9\x9c\x91" +
	"=\xb6\x14\xb2\xc7\xc0\xa8\xfd\x90\x8bq\xb5\xe3CK\x9e" +
	"\x09\xd1\xd0\xa9\xfb\xbc9z\xc2\xb8X\x8ba\xf6\xd9\xae" +
	"J\x8f\xdf\xa6\x08hF\xf4\x841K3\xe2 \x06{" +
	"\x87\x84\xda\xe9\x06\xfb\x99\x0f\x1a\xa8}\xcf\xf7H\x87\xc0" +
	"\xff\x17\x00\x00\xff\xff\xa0\xf0\xfdj"

func init() {
	schemas.Register(schema_832bcc6686a26d56,
		0x85257b30d6edf8c5,
		0x8748bc095e10cb5d,
		0x87c33f2330feb3d8,
		0x8821cdb23640783a,
		0x8a165fb4d71bf3a2,
		0x8e5322c1e9282534,
		0x8fae7b41c61fc890,
		0x93c99951eacc72ff,
		0x9430ab12c496d40c,
		0x94bf7df83408218d,
		0x95befe3f14606e6b,
		0x97e38948c61f878d,
		0x9ab599979b02ac59,
		0x9b37d729b9dd7b9d,
		0x9b8f27ba05e255c8,
		0x9d3032ff86043b75,
		0xa465f9502fd11e97,
		0xa8bf13fef2674866,
		0xabaedf5f7817c820,
		0xabd055422a4d7df1,
		0xad87da456fb0ebb9,
		0xb1ac056ed7647011,
		0xb1f0385d845e367f,
		0xb61ee2ecff34ca73,
		0xb72b6dc625baa6a4,
		0xbaa7b3b1ca91f833,
		0xbbcdbf4b4ae501fa,
		0xc7da65f9a2f20ba2,
		0xc95babe3bd394d2d,
		0xcbdc765fd5dff7ba,
		0xcc4411e60ba9c498,
		0xccb3b2e3603826e0,
		0xce44aee2d9e25049,
		0xcf9beaca1cc180c8,
		0xd636fba4f188dabe,
		0xd6514008f0f84ebc,
		0xd8bccf6e60a73791,
		0xd98c608877d9cb8d,
		0xddd1416669fb7613,
		0xde2a1a960863c11c,
		0xde50aebbad57549d,
		0xde9ed43cfaa83093,
		0xe1a2d1d51107bead,
		0xe1c9eac512335361,
		0xe508a29c83a059f8,
		0xe54e10aede55c7b1,
		0xe55d85fc1bf82f21,
		0xe5817f849ff906dc,
		0xe684eb3aef1a6859,
		0xe7711aada4bed56b,
		0xea26e9973bd6a0d9,
		0xf14fad09425d081c,
		0xf58782f48a121998,
		0xf705dc45c94766fd,
		0xf7ff4414476c186a,
		0xfca3742893be4cde)
}

var x_832bcc6686a26d56 = []byte{
	0, 0, 0, 0, 2, 0, 0, 0,
	0, 0, 0, 0, 1, 0, 0, 0,
	223, 7, 8, 27, 0, 0, 0, 0,
	0, 0, 0, 0, 4, 0, 0, 0,
	1, 0, 0, 0, 23, 0, 0, 0,
	8, 0, 0, 0, 1, 0, 0, 0,
	223, 7, 8, 27, 0, 0, 0, 0,
	223, 7, 8, 28, 0, 0, 0, 0,
	0, 0, 0, 0, 3, 0, 0, 0,
	0, 0, 0, 0, 1, 0, 1, 0,
	42, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3, 0, 0, 0,
	0, 0, 0, 0, 1, 0, 1, 0,
	42, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
}
