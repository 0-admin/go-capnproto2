{{with .Annotations.Doc}}// {{.}}
{{end}}type {{.Node.Name}} struct { Client {{capnp}}.Client }

{{range .Methods}}
func (c {{$.Node.Name}}) {{.Name|title}}(ctx {{context}}.Context, params func({{.Params.RemoteName $.Node}}) error, opts ...{{capnp}}.CallOption) {{.Results.RemoteName $.Node}}_Promise {
	if c.Client == nil {
		return {{.Results.RemoteName $.Node}}_Promise{Pipeline: {{capnp}}.NewPipeline({{capnp}}.ErrorAnswer({{capnp}}.ErrNullClient))}
	}
	call := &{{capnp}}.Call{
		Ctx: ctx,
		Method: {{capnp}}.Method{
			{{template "_interfaceMethod" .}}
		},
		Options: {{capnp}}.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = {{.Params.ObjectSize}}
		call.ParamsFunc = func(s {{capnp}}.Struct) error { return params({{.Params.RemoteName $.Node}}{Struct: s}) }
	}
	return {{.Results.RemoteName $.Node}}_Promise{Pipeline: {{capnp}}.NewPipeline(c.Client.Call(call))}
}
{{end}}
